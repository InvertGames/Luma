// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.ECS.Graphs {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameECSBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemsNode> _Systems;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemNode> _System;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentNode> _Component;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventNode> _Event;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventHandlerNode> _EventHandler;
        
        private Invert.Core.GraphDesigner.NodeConfig<ActionNode> _Action;
        
        private Invert.Core.GraphDesigner.NodeConfig<SimpleClassNode> _SimpleClass;
        
        private Invert.Core.GraphDesigner.NodeConfig<SendSignalNode> _SendSignal;
        
        private Invert.Core.GraphDesigner.NodeConfig<ConditionNode> _Condition;
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemsNode> Systems {
            get {
                return _Systems;
            }
            set {
                _Systems = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemNode> System {
            get {
                return _System;
            }
            set {
                _System = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentNode> Component {
            get {
                return _Component;
            }
            set {
                _Component = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventNode> Event {
            get {
                return _Event;
            }
            set {
                _Event = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventHandlerNode> EventHandler {
            get {
                return _EventHandler;
            }
            set {
                _EventHandler = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ActionNode> Action {
            get {
                return _Action;
            }
            set {
                _Action = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SimpleClassNode> SimpleClass {
            get {
                return _SimpleClass;
            }
            set {
                _SimpleClass = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SendSignalNode> SendSignal {
            get {
                return _SendSignal;
            }
            set {
                _SendSignal = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ConditionNode> Condition {
            get {
                return _Condition;
            }
            set {
                _Condition = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetEventsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertiesSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.Core.uFrameContainer container) {
            container.AddItem<HandlersReference>();
            container.AddItem<ComponentsReference>();
            container.RegisterInstance<IEditorCommand>(GetEventsSelectionCommand(), typeof(EventsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<EventsChildItem>();
            container.AddItem<RequiredComponentsReference>();
            container.RegisterInstance<IEditorCommand>(GetPropertiesSelectionCommand(), typeof(PropertiesChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertiesChildItem>();
            container.RegisterInstance<IEditorCommand>(GetCollectionsSelectionCommand(), typeof(CollectionsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<PropertyMapsReference>();
            Systems = container.AddGraph<SystemsGraph, SystemsNode>("SystemsGraph");
            Systems.Color(NodeColor.Orange);
            Systems.HasSubNode<SystemNode>();
            Systems.HasSubNode<ComponentNode>();
            Systems.HasSubNode<EventNode>();
            System = container.AddNode<SystemNode,SystemNodeViewModel,SystemNodeDrawer>("SystemNode");
            System.Color(NodeColor.Black);
            System.HasSubNode<EventHandlerNode>();
            System.HasSubNode<SendSignalNode>();
            System.HasSubNode<ConditionNode>();
            Component = container.AddNode<ComponentNode,ComponentNodeViewModel,ComponentNodeDrawer>("ComponentNode");
            Component.Color(NodeColor.DarkGray);
            Event = container.AddNode<EventNode,EventNodeViewModel,EventNodeDrawer>("EventNode");
            Event.Color(NodeColor.Red);
            EventHandler = container.AddNode<EventHandlerNode,EventHandlerNodeViewModel,EventHandlerNodeDrawer>("EventHandlerNode");
            EventHandler.Color(NodeColor.Blue);
            Action = container.AddNode<ActionNode,ActionNodeViewModel,ActionNodeDrawer>("ActionNode");
            Action.Color(NodeColor.Green);
            SimpleClass = container.AddNode<SimpleClassNode,SimpleClassNodeViewModel,SimpleClassNodeDrawer>("SimpleClassNode");
            SimpleClass.Color(NodeColor.Gray);
            SendSignal = container.AddNode<SendSignalNode,SendSignalNodeViewModel,SendSignalNodeDrawer>("SendSignalNode");
            SendSignal.Color(NodeColor.Green);
            Condition = container.AddNode<ConditionNode,ConditionNodeViewModel,ConditionNodeDrawer>("ConditionNode");
            Condition.Color(NodeColor.Orange);
            container.Connectable<HandlersReference,EventHandlerNode>();
            container.Connectable<ComponentsReference,RequiredComponentsReference>();
            container.Connectable<EventsChildItem,HandlersReference>();
            container.Connectable<ComponentNode,ComponentsReference>();
            container.Connectable<ActionNode,ActionNode>();
        }
    }
}
