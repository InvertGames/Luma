// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.ECS.Graphs {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameECSBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<EntityNode> _Entity;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentNode> _Component;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemNode> _System;
        
        private Invert.Core.GraphDesigner.NodeConfig<ServerSystemNode> _ServerSystem;
        
        private Invert.Core.GraphDesigner.NodeConfig<UnitySystemNode> _UnitySystem;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemsNode> _Systems;
        
        private Invert.Core.GraphDesigner.NodeConfig<EntitiesNode> _Entities;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventNode> _Event;
        
        private Invert.Core.GraphDesigner.NodeConfig<CommandNode> _Command;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventHandlerNode> _EventHandler;
        
        private Invert.Core.GraphDesigner.NodeConfig<SendSignalNode> _SendSignal;
        
        private Invert.Core.GraphDesigner.NodeConfig<ActionNode> _Action;
        
        private Invert.Core.GraphDesigner.NodeConfig<CustomActionNode> _CustomAction;
        
        private Invert.Core.GraphDesigner.NodeConfig<VariableNode> _Variable;
        
        private Invert.Core.GraphDesigner.NodeConfig<ConditionNode> _Condition;
        
        private Invert.Core.GraphDesigner.NodeConfig<IsTrueNode> _IsTrue;
        
        private Invert.Core.GraphDesigner.NodeConfig<IsFalseNode> _IsFalse;
        
        private Invert.Core.GraphDesigner.NodeConfig<LoopNode> _Loop;
        
        public Invert.Core.GraphDesigner.NodeConfig<EntityNode> Entity {
            get {
                return _Entity;
            }
            set {
                _Entity = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentNode> Component {
            get {
                return _Component;
            }
            set {
                _Component = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemNode> System {
            get {
                return _System;
            }
            set {
                _System = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ServerSystemNode> ServerSystem {
            get {
                return _ServerSystem;
            }
            set {
                _ServerSystem = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<UnitySystemNode> UnitySystem {
            get {
                return _UnitySystem;
            }
            set {
                _UnitySystem = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemsNode> Systems {
            get {
                return _Systems;
            }
            set {
                _Systems = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EntitiesNode> Entities {
            get {
                return _Entities;
            }
            set {
                _Entities = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventNode> Event {
            get {
                return _Event;
            }
            set {
                _Event = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<CommandNode> Command {
            get {
                return _Command;
            }
            set {
                _Command = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventHandlerNode> EventHandler {
            get {
                return _EventHandler;
            }
            set {
                _EventHandler = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SendSignalNode> SendSignal {
            get {
                return _SendSignal;
            }
            set {
                _SendSignal = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ActionNode> Action {
            get {
                return _Action;
            }
            set {
                _Action = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<CustomActionNode> CustomAction {
            get {
                return _CustomAction;
            }
            set {
                _CustomAction = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<VariableNode> Variable {
            get {
                return _Variable;
            }
            set {
                _Variable = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ConditionNode> Condition {
            get {
                return _Condition;
            }
            set {
                _Condition = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IsTrueNode> IsTrue {
            get {
                return _IsTrue;
            }
            set {
                _IsTrue = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IsFalseNode> IsFalse {
            get {
                return _IsFalse;
            }
            set {
                _IsFalse = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<LoopNode> Loop {
            get {
                return _Loop;
            }
            set {
                _Loop = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetComponentPropertySelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetComponentCollectionSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetEventTypeSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.Core.uFrameContainer container) {
            container.RegisterInstance<IEditorCommand>(GetComponentPropertySelectionCommand(), typeof(ComponentPropertyChildItem).Name + "TypeSelection");;
            container.RegisterInstance<IEditorCommand>(GetComponentCollectionSelectionCommand(), typeof(ComponentCollectionChildItem).Name + "TypeSelection");;
            container.RegisterInstance<IEditorCommand>(GetEventTypeSelectionCommand(), typeof(EventTypeChildItem).Name + "TypeSelection");;
            container.AddItem<EntityComponentsReference>();
            container.AddTypeItem<ComponentPropertyChildItem>();
            container.AddTypeItem<ComponentCollectionChildItem>();
            container.AddTypeItem<EventTypeChildItem>();
            container.AddItem<SystemEventHandlerReference>();
            container.AddItem<SystemComponentsReference>();
            container.AddItem<EventHandlerEntityMappingReference>();
            container.AddItem<PropertyMappingsReference>();
            container.AddItem<VariableReference>();
            container.AddItem<SingleVariableInputSlot>();
            container.AddItem<MultiVariableInputSlot>();
            container.AddItem<SingleVariableOutputSlot>();
            container.AddItem<MultiVariableOutputSlot>();
            Entity = container.AddNode<EntityNode,EntityNodeViewModel,EntityNodeDrawer>("Entity");
            Entity.Color(NodeColor.Black);
            Component = container.AddNode<ComponentNode,ComponentNodeViewModel,ComponentNodeDrawer>("Component");
            Component.Color(NodeColor.DarkGray);
            System = container.AddGraph<SystemGraph, SystemNode>("SystemGraph");
            System.Color(NodeColor.Black);
            System.HasSubNode<EventHandlerNode>();
            System.HasSubNode<ComponentNode>();
            System.HasSubNode<SendSignalNode>();
            System.HasSubNode<VariableNode>();
            System.HasSubNode<ConditionNode>();
            ServerSystem = container.AddNode<ServerSystemNode,ServerSystemNodeViewModel,ServerSystemNodeDrawer>("ServerSystem");
            ServerSystem.Color(NodeColor.Purple);
            UnitySystem = container.AddNode<UnitySystemNode,UnitySystemNodeViewModel,UnitySystemNodeDrawer>("UnitySystem");
            UnitySystem.Color(NodeColor.Blue);
            Systems = container.AddGraph<SystemsGraph, SystemsNode>("SystemsGraph");
            Systems.Color(NodeColor.Orange);
            Systems.HasSubNode<EventNode>();
            Systems.HasSubNode<SystemNode>();
            Systems.HasSubNode<ComponentNode>();
            Entities = container.AddGraph<EntitiesGraph, EntitiesNode>("EntitiesGraph");
            Entities.Color(NodeColor.YellowGreen);
            Entities.HasSubNode<EntityNode>();
            Event = container.AddNode<EventNode,EventNodeViewModel,EventNodeDrawer>("Event");
            Event.Color(NodeColor.Red);
            Command = container.AddNode<CommandNode,CommandNodeViewModel,CommandNodeDrawer>("Command");
            Command.Color(NodeColor.DarkDarkGray);
            EventHandler = container.AddNode<EventHandlerNode,EventHandlerNodeViewModel,EventHandlerNodeDrawer>("EventHandler");
            EventHandler.Color(NodeColor.Blue);
            EventHandler.HasSubNode<VariableNode>();
            EventHandler.HasSubNode<ConditionNode>();
            EventHandler.HasSubNode<IsFalseNode>();
            EventHandler.HasSubNode<IsTrueNode>();
            EventHandler.HasSubNode<LoopNode>();
            EventHandler.HasSubNode<EventHandlerNode>();
            SendSignal = container.AddNode<SendSignalNode,SendSignalNodeViewModel,SendSignalNodeDrawer>("SendSignal");
            SendSignal.Color(NodeColor.Green);
            Action = container.AddNode<ActionNode,ActionNodeViewModel,ActionNodeDrawer>("Action");
            Action.Color(NodeColor.Green);
            CustomAction = container.AddNode<CustomActionNode,CustomActionNodeViewModel,CustomActionNodeDrawer>("CustomAction");
            Variable = container.AddNode<VariableNode,VariableNodeViewModel,VariableNodeDrawer>("Variable");
            Condition = container.AddNode<ConditionNode,ConditionNodeViewModel,ConditionNodeDrawer>("Condition");
            Condition.Color(NodeColor.Orange);
            IsTrue = container.AddNode<IsTrueNode,IsTrueNodeViewModel,IsTrueNodeDrawer>("IsTrue");
            IsFalse = container.AddNode<IsFalseNode,IsFalseNodeViewModel,IsFalseNodeDrawer>("IsFalse");
            Loop = container.AddNode<LoopNode,LoopNodeViewModel,LoopNodeDrawer>("Loop");
            container.Connectable<SystemNode,ActionNode>();
            container.Connectable<SystemEventHandlerReference,EventHandlerNode>();
            container.Connectable<SystemComponentsReference,EventHandlerEntityMappingReference>();
            container.Connectable<EventHandlerNode,ActionNode>();
            container.Connectable<EventHandlerEntityMappingReference,CommandNode>();
            container.Connectable<VariableReference,ComponentNode>();
            container.Connectable<IEntityComponents,EntityComponentsReference>();
            container.Connectable<ISystemEventHandler,SystemEventHandlerReference>();
            container.Connectable<ISystemComponents,SystemComponentsReference>();
            container.Connectable<IEventHandlerEntityMapping,EventHandlerEntityMappingReference>();
            container.Connectable<IPropertyMappings,PropertyMappingsReference>();
            container.Connectable<IVariable,VariableReference>();
        }
    }
}
