// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.ECS.Graphs {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core.GraphDesigner;
    
    
    public class EntityNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<IEntityComponents> PossibleComponents {
            get {
                return this.Project.AllGraphItems.OfType<IEntityComponents>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Components", SectionVisibility.Always, false, false, typeof(IEntityComponents), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<EntityComponentsReference> Components {
            get {
                return ChildItems.OfType<EntityComponentsReference>();
            }
        }
    }
    
    public class ComponentNodeBase : Invert.Core.GraphDesigner.GenericNode, IEntityComponents, ISystemComponents {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<PropertiesChildItem> Properties {
            get {
                return ChildItems.OfType<PropertiesChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<CollectionsChildItem> Collections {
            get {
                return ChildItems.OfType<CollectionsChildItem>();
            }
        }
    }
    
    public class SystemNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<ISystemEventHandler> PossibleHandlers {
            get {
                return this.Project.AllGraphItems.OfType<ISystemEventHandler>();
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<ISystemComponents> PossibleComponents {
            get {
                return this.Project.AllGraphItems.OfType<ISystemComponents>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Events", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<EventsChildItem> Events {
            get {
                return ChildItems.OfType<EventsChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Handlers", SectionVisibility.WhenNodeIsFilter, false, false, typeof(ISystemEventHandler), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<HandlersReference> Handlers {
            get {
                return ChildItems.OfType<HandlersReference>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Components", SectionVisibility.Always, false, false, typeof(ISystemComponents), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<ComponentsReference> Components {
            get {
                return ChildItems.OfType<ComponentsReference>();
            }
        }
    }
    
    public class ServerSystemNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class UnitySystemNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class SystemsNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class EntitiesNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class EventNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<PropertiesChildItem> Properties {
            get {
                return ChildItems.OfType<PropertiesChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<CollectionsChildItem> Collections {
            get {
                return ChildItems.OfType<CollectionsChildItem>();
            }
        }
    }
    
    public class CommandNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<PropertiesChildItem> Properties {
            get {
                return ChildItems.OfType<PropertiesChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<CollectionsChildItem> Collections {
            get {
                return ChildItems.OfType<CollectionsChildItem>();
            }
        }
    }
    
    public class EventHandlerNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<IEventHandlerEntityMapping> PossibleOutputs {
            get {
                return this.Project.AllGraphItems.OfType<IEventHandlerEntityMapping>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Outputs", SectionVisibility.Always, true, false, typeof(IEventHandlerEntityMapping), true, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<RequiredComponentsChildItem> Outputs {
            get {
                return ChildItems.OfType<RequiredComponentsChildItem>();
            }
        }
    }
    
    public class SendSignalNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<IPropertyMappings> PossiblePropertyMappings {
            get {
                return this.Project.AllGraphItems.OfType<IPropertyMappings>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("PropertyMappings", SectionVisibility.Always, false, false, typeof(IPropertyMappings), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<PropertyMapsReference> PropertyMappings {
            get {
                return ChildItems.OfType<PropertyMapsReference>();
            }
        }
    }
    
    public class ActionNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class CustomActionNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class VariableNodeBase : ActionNode, ISingleVariableInputSlot, IMultiVariableInputSlot, ISingleVariableOutputSlot, IMultiVariableOutputSlot {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class ConditionNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class IsTrueNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class IsFalseNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class LoopNodeBase : ActionNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class StateMachineNodeBase : ComponentNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public class StateNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
}
