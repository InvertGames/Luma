// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;
using Invert.ECS.Unity;


public class DestructionSystemBase : SystemBase {
    
    public override void Initialize(IGame game) {
        base.Initialize(game);
        game.EventManager.ListenFor( MyGameEvents.OnCollisionEnter, OnCollisionEnter );
 
    }
    
    protected virtual void OnCollisionEnter(Invert.ECS.IEvent e) {
        HandleCollision(e);
        HandleCollider(e);
    }
    
    protected virtual void HandleCollision(CollisionEventData data, Damageable collidee) {
    }
    
    protected virtual void HandleCollision(Invert.ECS.IEvent e) {
        var data = e.Data as CollisionEventData;
        Damageable collidee;
        if (!Game.ComponentSystem.TryGetComponent<Damageable>(data.CollideeId, out collidee)) {
            return;
        }
        this.HandleCollision(data, collidee);
    }
    
    protected virtual void HandleCollider(CollisionEventData data, Damageable colliderid) {
    }
    
    protected virtual void HandleCollider(Invert.ECS.IEvent e) {
        var data = e.Data as CollisionEventData;
        Damageable colliderid;
        if (!Game.ComponentSystem.TryGetComponent<Damageable>(data.ColliderId, out colliderid)) {
            return;
        }
        this.HandleCollider(data, colliderid);
    }
}

public class TargetingSystemBase : SystemBase {
    
    public override void Initialize(IGame game) {
        base.Initialize(game);
        game.EventManager.ListenFor(MyGameEvents.OnCollisionEnter, OnCollisionEnter); 
    }
    
    protected virtual void OnCollisionEnter(Invert.ECS.IEvent e) {
        TargetableInRange(e);
    }
    
    protected virtual void TargetableInRange(CollisionEventData data, Targetable targetable, Targeter targeter) {
    }
    
    protected virtual void TargetableInRange(Invert.ECS.IEvent e) {
        var data = e.Data as CollisionEventData;
        Targetable targetable;
        if (!Game.ComponentSystem.TryGetComponent<Targetable>(data.ColliderId, out targetable)) {
            return;
        }
        Targeter targeter;
        if (!Game.ComponentSystem.TryGetComponent<Targeter>(data.CollideeId, out targeter)) {
            return;
        }
        this.TargetableInRange(data, targetable, targeter);
    }
}

public class TargetingHUDSystemBase : UnitySystem {
    
    public override void Initialize(IGame game) {
        base.Initialize(game);
        game.EventManager.ListenFor(TargetingEvents.TargetAcquired, TargetAcquired); 
    }
    
    protected virtual void TargetAcquired(Invert.ECS.IEvent e) {
        HighlightTarget(e);
    }
    
    protected virtual void HighlightTarget(TargetData data, Targetable targetableid, Int32 targeter) {
    }
    
    protected virtual void HighlightTarget(Invert.ECS.IEvent e) {
        var data = e.Data as TargetData;
        Targetable targetableid;
        if (!Game.ComponentSystem.TryGetComponent<Targetable>(data.TargetableId, out targetableid)) {
            return;
        }
        this.HighlightTarget(data, targetableid, data.Targeter);
    }
}
