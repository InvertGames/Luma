// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class UIWidgetSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<CompositeUIWidget> _CompositeUIWidgetManager;
        
        private IEcsComponentManagerOf<SingularUIWidget> _SingularUIWidgetManager;
        
        private IEcsComponentManagerOf<UIWidget> _UIWidgetManager;
        
        private IEcsComponentManagerOf<Animated> _AnimatedManager;
        
        private IEcsComponentManagerOf<Singular> _SingularManager;
        
        private IEcsComponentManagerOf<Composite> _CompositeManager;
        
        private IEcsComponentManagerOf<AnimatedWidget> _AnimatedWidgetManager;
        
        public IEcsComponentManagerOf<CompositeUIWidget> CompositeUIWidgetManager {
            get {
                return _CompositeUIWidgetManager;
            }
            set {
                _CompositeUIWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SingularUIWidget> SingularUIWidgetManager {
            get {
                return _SingularUIWidgetManager;
            }
            set {
                _SingularUIWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<UIWidget> UIWidgetManager {
            get {
                return _UIWidgetManager;
            }
            set {
                _UIWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Animated> AnimatedManager {
            get {
                return _AnimatedManager;
            }
            set {
                _AnimatedManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Singular> SingularManager {
            get {
                return _SingularManager;
            }
            set {
                _SingularManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Composite> CompositeManager {
            get {
                return _CompositeManager;
            }
            set {
                _CompositeManager = value;
            }
        }
        
        public IEcsComponentManagerOf<AnimatedWidget> AnimatedWidgetManager {
            get {
                return _AnimatedWidgetManager;
            }
            set {
                _AnimatedWidgetManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            CompositeUIWidgetManager = ComponentSystem.RegisterGroup<CompositeUIWidgetGroup,CompositeUIWidget>();
            SingularUIWidgetManager = ComponentSystem.RegisterGroup<SingularUIWidgetGroup,SingularUIWidget>();
            UIWidgetManager = ComponentSystem.RegisterComponent<UIWidget>(57);
            AnimatedManager = ComponentSystem.RegisterComponent<Animated>(58);
            SingularManager = ComponentSystem.RegisterComponent<Singular>(61);
            CompositeManager = ComponentSystem.RegisterComponent<Composite>(60);
            AnimatedWidgetManager = ComponentSystem.RegisterGroup<AnimatedWidgetGroup,AnimatedWidget>();
            this.PropertyChangedEvent<SingularUIWidget,System.Boolean>(Group=>Group.UIWidget.IsActiveObservable, SingularWidgetIsActiveChangedFilter, Group=>Group.UIWidget.IsActive, false);
            this.OnEvent<ChangeWidgetStateDispatcher>().Subscribe(_=>{ ExecuteChangeCompositeWidgetStateFilter(_); }).DisposeWith(this);
            this.PropertyChangedEvent<UIWidget,FlipCube.WidgetState>(Group=>Group.StateObservable, OnUIWidgetStateChangedFilter, Group=>Group.State, false);
            this.OnEvent<ChangeWidgetStateDispatcher>().Subscribe(_=>{ ExecuteChangeSingularWidgetStateFilter(_); }).DisposeWith(this);
            this.PropertyChangedEvent<CompositeUIWidget,System.Boolean>(Group=>Group.UIWidget.IsActiveObservable, CompositeWidgetIsActiveChangedFilter, Group=>Group.UIWidget.IsActive, false);
        }
        
        protected virtual void SingularWidgetIsActiveChanged(SingularUIWidget data, SingularUIWidget group, PropertyChangedEvent<System.Boolean> value) {
        }
        
        protected void SingularWidgetIsActiveChangedFilter(SingularUIWidget data, PropertyChangedEvent<System.Boolean> value) {
            var GroupItem = SingularUIWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.SingularWidgetIsActiveChanged(data, GroupItem, value);
        }
        
        protected virtual void ExecuteChangeCompositeWidgetStateHandler(ChangeWidgetStateDispatcher data, CompositeUIWidget source) {
        }
        
        protected void ExecuteChangeCompositeWidgetStateFilter(ChangeWidgetStateDispatcher data) {
            var SourceItem = CompositeUIWidgetManager[data.EntityId];
            if (SourceItem == null) {
                return;
            }
            if (!SourceItem.Enabled) {
                return;
            }
            this.ExecuteChangeCompositeWidgetStateHandler(data, SourceItem);
        }
        
        protected virtual void OnUIWidgetStateChanged(UIWidget data, UIWidget group, PropertyChangedEvent<FlipCube.WidgetState> value) {
        }
        
        protected void OnUIWidgetStateChangedFilter(UIWidget data, PropertyChangedEvent<FlipCube.WidgetState> value) {
            var GroupUIWidget = UIWidgetManager[data.EntityId];
            if (GroupUIWidget == null) {
                return;
            }
            if (!GroupUIWidget.Enabled) {
                return;
            }
            this.OnUIWidgetStateChanged(data, GroupUIWidget, value);
        }
        
        protected virtual void ExecuteChangeSingularWidgetStateHandler(ChangeWidgetStateDispatcher data, SingularUIWidget source) {
        }
        
        protected void ExecuteChangeSingularWidgetStateFilter(ChangeWidgetStateDispatcher data) {
            var SourceItem = SingularUIWidgetManager[data.EntityId];
            if (SourceItem == null) {
                return;
            }
            if (!SourceItem.Enabled) {
                return;
            }
            this.ExecuteChangeSingularWidgetStateHandler(data, SourceItem);
        }
        
        protected virtual void CompositeWidgetIsActiveChanged(CompositeUIWidget data, CompositeUIWidget group, PropertyChangedEvent<System.Boolean> value) {
        }
        
        protected void CompositeWidgetIsActiveChangedFilter(CompositeUIWidget data, PropertyChangedEvent<System.Boolean> value) {
            var GroupItem = CompositeUIWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.CompositeWidgetIsActiveChanged(data, GroupItem, value);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("12eed9ae-d950-4f17-9d28-965cf1f88dfc")]
    public partial class UIWidgetSystem : UIWidgetSystemBase {
        
        private static UIWidgetSystem _Instance;
        
        public UIWidgetSystem() {
            Instance = this;
        }
        
        public static UIWidgetSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
