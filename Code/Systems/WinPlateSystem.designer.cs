// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class WinPlateSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<WinPlate> _WinPlateManager;
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        public IEcsComponentManagerOf<WinPlate> WinPlateManager {
            get {
                return _WinPlateManager;
            }
            set {
                _WinPlateManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            WinPlateManager = ComponentSystem.RegisterComponent<WinPlate>(49);
            PlayerManager = ComponentSystem.RegisterComponent<Player>(26);
            this.OnEvent<FlipCube.RollCompleteStandingUp>().Subscribe(_=>{ WinPlateRollCompleteStandingUpFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void WinPlateRollCompleteStandingUpHandler(FlipCube.RollCompleteStandingUp data, WinPlate plate, Player player) {
        }
        
        protected void WinPlateRollCompleteStandingUpFilter(FlipCube.RollCompleteStandingUp data) {
            var PlateWinPlate = WinPlateManager[data.Plate];
            if (PlateWinPlate == null) {
                return;
            }
            if (!PlateWinPlate.Enabled) {
                return;
            }
            var PlayerPlayer = PlayerManager[data.Player];
            if (PlayerPlayer == null) {
                return;
            }
            if (!PlayerPlayer.Enabled) {
                return;
            }
            this.WinPlateRollCompleteStandingUpHandler(data, PlateWinPlate, PlayerPlayer);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("431e4749-af09-4d67-b5e7-b3a0d0742c3b")]
    public partial class WinPlateSystem : WinPlateSystemBase {
        
        private static WinPlateSystem _Instance;
        
        public WinPlateSystem() {
            Instance = this;
        }
        
        public static WinPlateSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
