// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine.UI;
    
    
    public partial class LevelSelectionUISystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<LevelSelectionUIItem> _LevelSelectionUIItemManager;
        
        private IEcsComponentManagerOf<LevelSelectionUI> _LevelSelectionUIManager;
        
        public IEcsComponentManagerOf<LevelSelectionUIItem> LevelSelectionUIItemManager {
            get {
                return _LevelSelectionUIItemManager;
            }
            set {
                _LevelSelectionUIItemManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelSelectionUI> LevelSelectionUIManager {
            get {
                return _LevelSelectionUIManager;
            }
            set {
                _LevelSelectionUIManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            LevelSelectionUIItemManager = ComponentSystem.RegisterComponent<LevelSelectionUIItem>(45);
            LevelSelectionUIManager = ComponentSystem.RegisterComponent<LevelSelectionUI>(44);
            this.PropertyChangedEvent<LevelSelectionUI,System.Int32>(Group=>Group.SkipObservable, SkipChangedFilter, Group=>Group.Skip, false);
            this.PropertyChangedEvent<LevelSelectionUI,System.Int32>(Group=>Group.LimitObservable, LimitChangedFilter, null, false);
            this.PropertyChangedEvent<LevelSelectionUIItem,System.Int32>(Group=>Group.LevelIndexObservable, LevelIndexChangedFilter, Group=>Group.LevelIndex, false);
            this.PropertyChangedEvent<LevelSelectionUI,System.Int32>(Group=>Group.PageObservable, PageChangedFilter, Group=>Group.Page, false);
        }
        
        protected virtual void SkipChanged(LevelSelectionUI data, LevelSelectionUI group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void SkipChangedFilter(LevelSelectionUI data, PropertyChangedEvent<System.Int32> value) {
            var GroupLevelSelectionUI = LevelSelectionUIManager[data.EntityId];
            if (GroupLevelSelectionUI == null) {
                return;
            }
            if (!GroupLevelSelectionUI.Enabled) {
                return;
            }
            this.SkipChanged(data, GroupLevelSelectionUI, value);
        }
        
        protected virtual void LimitChanged(LevelSelectionUI data, LevelSelectionUI group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void LimitChangedFilter(LevelSelectionUI data, PropertyChangedEvent<System.Int32> value) {
            var GroupLevelSelectionUI = LevelSelectionUIManager[data.EntityId];
            if (GroupLevelSelectionUI == null) {
                return;
            }
            if (!GroupLevelSelectionUI.Enabled) {
                return;
            }
            this.LimitChanged(data, GroupLevelSelectionUI, value);
        }
        
        protected virtual void LevelIndexChanged(LevelSelectionUIItem data, LevelSelectionUIItem group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void LevelIndexChangedFilter(LevelSelectionUIItem data, PropertyChangedEvent<System.Int32> value) {
            var GroupLevelSelectionUIItem = LevelSelectionUIItemManager[data.EntityId];
            if (GroupLevelSelectionUIItem == null) {
                return;
            }
            if (!GroupLevelSelectionUIItem.Enabled) {
                return;
            }
            this.LevelIndexChanged(data, GroupLevelSelectionUIItem, value);
        }
        
        protected virtual void PageChanged(LevelSelectionUI data, LevelSelectionUI group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void PageChangedFilter(LevelSelectionUI data, PropertyChangedEvent<System.Int32> value) {
            var GroupLevelSelectionUI = LevelSelectionUIManager[data.EntityId];
            if (GroupLevelSelectionUI == null) {
                return;
            }
            if (!GroupLevelSelectionUI.Enabled) {
                return;
            }
            this.PageChanged(data, GroupLevelSelectionUI, value);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("4e0e6ed9-2181-40c1-aa62-bd0e6b71fc19")]
    public partial class LevelSelectionUISystem : LevelSelectionUISystemBase {
        
        private static LevelSelectionUISystem _Instance;
        
        public LevelSelectionUISystem() {
            Instance = this;
        }
        
        public static LevelSelectionUISystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
