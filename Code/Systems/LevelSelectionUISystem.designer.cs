// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public partial class LevelSelectionUISystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<LevelSelectionWidget> _LevelSelectionWidgetManager;
        
        private IEcsComponentManagerOf<LevelData> _LevelDataManager;
        
        private IEcsComponentManagerOf<LevelGridItemUI> _LevelGridItemUIManager;
        
        private IEcsComponentManagerOf<LevelGridWidget> _LevelGridWidgetManager;
        
        private IEcsComponentManagerOf<LevelSelectionUI> _LevelSelectionUIManager;
        
        private IEcsComponentManagerOf<LevelGridUI> _LevelGridUIManager;
        
        public IEcsComponentManagerOf<LevelSelectionWidget> LevelSelectionWidgetManager {
            get {
                return _LevelSelectionWidgetManager;
            }
            set {
                _LevelSelectionWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelData> LevelDataManager {
            get {
                return _LevelDataManager;
            }
            set {
                _LevelDataManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelGridItemUI> LevelGridItemUIManager {
            get {
                return _LevelGridItemUIManager;
            }
            set {
                _LevelGridItemUIManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelGridWidget> LevelGridWidgetManager {
            get {
                return _LevelGridWidgetManager;
            }
            set {
                _LevelGridWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelSelectionUI> LevelSelectionUIManager {
            get {
                return _LevelSelectionUIManager;
            }
            set {
                _LevelSelectionUIManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelGridUI> LevelGridUIManager {
            get {
                return _LevelGridUIManager;
            }
            set {
                _LevelGridUIManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            LevelSelectionWidgetManager = ComponentSystem.RegisterGroup<LevelSelectionWidgetGroup,LevelSelectionWidget>();
            LevelDataManager = ComponentSystem.RegisterComponent<LevelData>(38);
            LevelGridItemUIManager = ComponentSystem.RegisterComponent<LevelGridItemUI>(83);
            LevelGridWidgetManager = ComponentSystem.RegisterGroup<LevelGridWidgetGroup,LevelGridWidget>();
            LevelSelectionUIManager = ComponentSystem.RegisterComponent<LevelSelectionUI>(78);
            LevelGridUIManager = ComponentSystem.RegisterComponent<LevelGridUI>(79);
            this.PropertyChangedEvent<LevelGridItemUI,System.Int32>(Group=>Group.BoundLevelObservable, LevelGridItemBoundLevelChangedFilter, Group=>Group.BoundLevel, false);
            LevelDataManager.CreatedObservable.Subscribe(LevelDataCreatedFilter).DisposeWith(this);
            LevelGridItemUIManager.CreatedObservable.Subscribe(LevelGridItemCreatedFilter).DisposeWith(this);
            this.PropertyChangedEvent<LevelGridWidget,System.Boolean>(Group=>Group.LevelGridUI.RequiresUpdateObservable, LevelGridRequireUpdateChangedFilter, Group=>Group.LevelGridUI.RequiresUpdate, false);
            LevelSelectionWidgetManager.CreatedObservable.Subscribe(LevelSelectionWidgetCreatedFilter).DisposeWith(this);
            this.OnEvent<FlipCube.LevelGridTrySelectLevel>().Subscribe(_=>{ OnLevelGridTrySelectLevelFilter(_); }).DisposeWith(this);
            this.PropertyChangedEvent<LevelGridWidget,System.Int32>(Group=>Group.LevelGridUI.SkipObservable, LevelSelectionSkipChangedFilter, Group=>Group.LevelGridUI.Skip, false);
            this.PropertyChangedEvent<LevelGridWidget,FlipCube.WidgetState>(Group=>Group.UIWidget.StateObservable, LevelGridWidgetStateChangedFilter, Group=>Group.UIWidget.State, false);
        }
        
        protected virtual void LevelGridItemBoundLevelChanged(LevelGridItemUI data, LevelGridItemUI group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void LevelGridItemBoundLevelChangedFilter(LevelGridItemUI data, PropertyChangedEvent<System.Int32> value) {
            var GroupLevelGridItemUI = LevelGridItemUIManager[data.EntityId];
            if (GroupLevelGridItemUI == null) {
                return;
            }
            if (!GroupLevelGridItemUI.Enabled) {
                return;
            }
            this.LevelGridItemBoundLevelChanged(data, GroupLevelGridItemUI, value);
        }
        
        protected virtual void LevelDataCreated(LevelData data, LevelData group) {
        }
        
        protected void LevelDataCreatedFilter(LevelData data) {
            var GroupLevelData = LevelDataManager[data.EntityId];
            if (GroupLevelData == null) {
                return;
            }
            if (!GroupLevelData.Enabled) {
                return;
            }
            this.LevelDataCreated(data, GroupLevelData);
        }
        
        protected virtual void LevelGridItemCreated(LevelGridItemUI data, LevelGridItemUI group) {
        }
        
        protected void LevelGridItemCreatedFilter(LevelGridItemUI data) {
            var GroupLevelGridItemUI = LevelGridItemUIManager[data.EntityId];
            if (GroupLevelGridItemUI == null) {
                return;
            }
            if (!GroupLevelGridItemUI.Enabled) {
                return;
            }
            this.LevelGridItemCreated(data, GroupLevelGridItemUI);
        }
        
        protected virtual void LevelGridRequireUpdateChanged(LevelGridWidget data, LevelGridWidget group, PropertyChangedEvent<System.Boolean> value) {
        }
        
        protected void LevelGridRequireUpdateChangedFilter(LevelGridWidget data, PropertyChangedEvent<System.Boolean> value) {
            var GroupItem = LevelGridWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.LevelGridRequireUpdateChanged(data, GroupItem, value);
        }
        
        protected virtual void LevelSelectionWidgetCreated(LevelSelectionWidget data, LevelSelectionWidget group) {
        }
        
        protected void LevelSelectionWidgetCreatedFilter(LevelSelectionWidget data) {
            var GroupItem = LevelSelectionWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.LevelSelectionWidgetCreated(data, GroupItem);
        }
        
        protected virtual void OnLevelGridTrySelectLevelHandler(FlipCube.LevelGridTrySelectLevel data, LevelGridItemUI source) {
        }
        
        protected void OnLevelGridTrySelectLevelFilter(FlipCube.LevelGridTrySelectLevel data) {
            var SourceLevelGridItemUI = LevelGridItemUIManager[data.Source];
            if (SourceLevelGridItemUI == null) {
                return;
            }
            if (!SourceLevelGridItemUI.Enabled) {
                return;
            }
            this.OnLevelGridTrySelectLevelHandler(data, SourceLevelGridItemUI);
        }
        
        protected virtual void LevelSelectionSkipChanged(LevelGridWidget data, LevelGridWidget group, PropertyChangedEvent<System.Int32> value) {
        }
        
        protected void LevelSelectionSkipChangedFilter(LevelGridWidget data, PropertyChangedEvent<System.Int32> value) {
            var GroupItem = LevelGridWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.LevelSelectionSkipChanged(data, GroupItem, value);
        }
        
        protected virtual void LevelGridWidgetStateChanged(LevelGridWidget data, LevelGridWidget group, PropertyChangedEvent<FlipCube.WidgetState> value) {
        }
        
        protected void LevelGridWidgetStateChangedFilter(LevelGridWidget data, PropertyChangedEvent<FlipCube.WidgetState> value) {
            var GroupItem = LevelGridWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.LevelGridWidgetStateChanged(data, GroupItem, value);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("1f7199a3-8efe-4556-8634-b5717882c10b")]
    public partial class LevelSelectionUISystem : LevelSelectionUISystemBase {
        
        private static LevelSelectionUISystem _Instance;
        
        public LevelSelectionUISystem() {
            Instance = this;
        }
        
        public static LevelSelectionUISystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
