// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class SwitchPlateSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<SwitchPlate> _SwitchPlateManager;
        
        private IEcsComponentManagerOf<Roller> _RollerManager;
        
        private IEcsComponentManagerOf<SwitchPlateTrigger> _SwitchPlateTriggerManager;
        
        public IEcsComponentManagerOf<SwitchPlate> SwitchPlateManager {
            get {
                return _SwitchPlateManager;
            }
            set {
                _SwitchPlateManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Roller> RollerManager {
            get {
                return _RollerManager;
            }
            set {
                _RollerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SwitchPlateTrigger> SwitchPlateTriggerManager {
            get {
                return _SwitchPlateTriggerManager;
            }
            set {
                _SwitchPlateTriggerManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            SwitchPlateManager = ComponentSystem.RegisterComponent<SwitchPlate>(45);
            RollerManager = ComponentSystem.RegisterComponent<Roller>(38);
            SwitchPlateTriggerManager = ComponentSystem.RegisterComponent<SwitchPlateTrigger>(46);
            this.PropertyChangedEvent<SwitchPlate,System.Boolean>(Group=>Group.OnObservable, OnChangedFilter, Group=>Group.On, false);
            this.OnEvent<FlipCube.LevelReset>().Subscribe(_=>{ ResetSwitchPlateTriggerFilter(_); }).DisposeWith(this);
            this.OnEvent<FlipCube.LevelReset>().Subscribe(_=>{ ResetSwitchPlateFilter(_); }).DisposeWith(this);
            this.OnEvent<FlipCube.RollCompleteStandingUp>().Subscribe(_=>{ LandedOnTriggerFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void OnChanged(SwitchPlate data, SwitchPlate group, PropertyChangedEvent<System.Boolean> value) {
        }
        
        protected void OnChangedFilter(SwitchPlate data, PropertyChangedEvent<System.Boolean> value) {
            var GroupSwitchPlate = SwitchPlateManager[data.EntityId];
            if (GroupSwitchPlate == null) {
                return;
            }
            if (!GroupSwitchPlate.Enabled) {
                return;
            }
            this.OnChanged(data, GroupSwitchPlate, value);
        }
        
        protected virtual void ResetSwitchPlateTriggerHandler(FlipCube.LevelReset data, SwitchPlateTrigger group) {
            var handler = new ResetSwitchPlateTriggerHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void ResetSwitchPlateTriggerFilter(FlipCube.LevelReset data) {
            var SwitchPlateTriggerItems = SwitchPlateTriggerManager.Components;
            for (var SwitchPlateTriggerIndex = 0
            ; SwitchPlateTriggerIndex < SwitchPlateTriggerItems.Count; SwitchPlateTriggerIndex++
            ) {
                if (!SwitchPlateTriggerItems[SwitchPlateTriggerIndex].Enabled) {
                    continue;
                }
                this.ResetSwitchPlateTriggerHandler(data, SwitchPlateTriggerItems[SwitchPlateTriggerIndex]);
            }
        }
        
        protected virtual void ResetSwitchPlateHandler(FlipCube.LevelReset data, SwitchPlate group) {
            var handler = new ResetSwitchPlateHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void ResetSwitchPlateFilter(FlipCube.LevelReset data) {
            var SwitchPlateItems = SwitchPlateManager.Components;
            for (var SwitchPlateIndex = 0
            ; SwitchPlateIndex < SwitchPlateItems.Count; SwitchPlateIndex++
            ) {
                if (!SwitchPlateItems[SwitchPlateIndex].Enabled) {
                    continue;
                }
                this.ResetSwitchPlateHandler(data, SwitchPlateItems[SwitchPlateIndex]);
            }
        }
        
        protected virtual void LandedOnTriggerHandler(FlipCube.RollCompleteStandingUp data, Roller player) {
            var handler = new LandedOnTriggerHandler();
            handler.System = this;
            handler.Event = data;
            handler.Player = player;
            StartCoroutine(handler.Execute());
        }
        
        protected void LandedOnTriggerFilter(FlipCube.RollCompleteStandingUp data) {
            var PlayerRoller = RollerManager[data.Player];
            if (PlayerRoller == null) {
                return;
            }
            if (!PlayerRoller.Enabled) {
                return;
            }
            this.LandedOnTriggerHandler(data, PlayerRoller);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("99b5b440-44a9-49d2-b5e3-a8a8df0d3ac1")]
    public partial class SwitchPlateSystem : SwitchPlateSystemBase {
        
        private static SwitchPlateSystem _Instance;
        
        public SwitchPlateSystem() {
            Instance = this;
        }
        
        public static SwitchPlateSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
