// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class GameUISystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<GameUIWidget> _GameUIWidgetManager;
        
        private IEcsComponentManagerOf<GameUI> _GameUIManager;
        
        public IEcsComponentManagerOf<GameUIWidget> GameUIWidgetManager {
            get {
                return _GameUIWidgetManager;
            }
            set {
                _GameUIWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<GameUI> GameUIManager {
            get {
                return _GameUIManager;
            }
            set {
                _GameUIManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            GameUIWidgetManager = ComponentSystem.RegisterGroup<GameUIWidgetGroup,GameUIWidget>();
            GameUIManager = ComponentSystem.RegisterComponent<GameUI>(88);
            this.OnEvent<FlipCube.CloseAllGeneralMenus>().Subscribe(_=>{ GameUISystemCloseAllGeneralMenusFilter(_); }).DisposeWith(this);
            this.PropertyChangedEvent<GameUIWidget,FlipCube.GeneralGameUIState>(Group=>Group.GameUI.StateObservable, GameUIStateChangedFilter, Group=>Group.GameUI.State, false);
            GameUIWidgetManager.CreatedObservable.Subscribe(GameUICreatedFilter).DisposeWith(this);
            this.OnEvent<FlipCube.ShowGeneralMenu>().Subscribe(_=>{ GameUISystemShowGeneralMenusFilter(_); }).DisposeWith(this);
            this.PropertyChangedEvent<GameUIWidget,FlipCube.WidgetState>(Group=>Group.UIWidget.StateObservable, GameUIWidgetStateChangedFilter, Group=>Group.UIWidget.State, false);
        }
        
        protected virtual void GameUISystemCloseAllGeneralMenusHandler(FlipCube.CloseAllGeneralMenus data, GameUIWidget group) {
        }
        
        protected void GameUISystemCloseAllGeneralMenusFilter(FlipCube.CloseAllGeneralMenus data) {
            var GameUIWidgetItems = GameUIWidgetManager.Components;
            for (var GameUIWidgetIndex = 0
            ; GameUIWidgetIndex < GameUIWidgetItems.Count; GameUIWidgetIndex++
            ) {
                if (!GameUIWidgetItems[GameUIWidgetIndex].Enabled) {
                    continue;
                }
                this.GameUISystemCloseAllGeneralMenusHandler(data, GameUIWidgetItems[GameUIWidgetIndex]);
            }
        }
        
        protected virtual void GameUIStateChanged(GameUIWidget data, GameUIWidget group, PropertyChangedEvent<FlipCube.GeneralGameUIState> value) {
        }
        
        protected void GameUIStateChangedFilter(GameUIWidget data, PropertyChangedEvent<FlipCube.GeneralGameUIState> value) {
            var GroupItem = GameUIWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.GameUIStateChanged(data, GroupItem, value);
        }
        
        protected virtual void GameUICreated(GameUIWidget data, GameUIWidget group) {
        }
        
        protected void GameUICreatedFilter(GameUIWidget data) {
            var GroupItem = GameUIWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.GameUICreated(data, GroupItem);
        }
        
        protected virtual void GameUISystemShowGeneralMenusHandler(FlipCube.ShowGeneralMenu data, GameUIWidget group) {
        }
        
        protected void GameUISystemShowGeneralMenusFilter(FlipCube.ShowGeneralMenu data) {
            var GameUIWidgetItems = GameUIWidgetManager.Components;
            for (var GameUIWidgetIndex = 0
            ; GameUIWidgetIndex < GameUIWidgetItems.Count; GameUIWidgetIndex++
            ) {
                if (!GameUIWidgetItems[GameUIWidgetIndex].Enabled) {
                    continue;
                }
                this.GameUISystemShowGeneralMenusHandler(data, GameUIWidgetItems[GameUIWidgetIndex]);
            }
        }
        
        protected virtual void GameUIWidgetStateChanged(GameUIWidget data, GameUIWidget group, PropertyChangedEvent<FlipCube.WidgetState> value) {
        }
        
        protected void GameUIWidgetStateChangedFilter(GameUIWidget data, PropertyChangedEvent<FlipCube.WidgetState> value) {
            var GroupItem = GameUIWidgetManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.GameUIWidgetStateChanged(data, GroupItem, value);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("df09713a-3e8b-4c0f-80a7-237c88449d39")]
    public partial class GameUISystem : GameUISystemBase {
        
        private static GameUISystem _Instance;
        
        public GameUISystem() {
            Instance = this;
        }
        
        public static GameUISystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
