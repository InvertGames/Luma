// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class LevelSceneDataGroup : ReactiveGroup<LevelSceneData> {
        
        private IEcsComponentManagerOf<SceneData> _SceneDataManager;
        
        private IEcsComponentManagerOf<LevelData> _LevelDataManager;
        
        private int lastEntityId;
        
        private SceneData SceneData;
        
        private LevelData LevelData;
        
        public IEcsComponentManagerOf<SceneData> SceneDataManager {
            get {
                return _SceneDataManager;
            }
            set {
                _SceneDataManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LevelData> LevelDataManager {
            get {
                return _LevelDataManager;
            }
            set {
                _LevelDataManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.IComponentSystem componentSystem) {
            SceneDataManager = componentSystem.RegisterComponent<SceneData>();
            yield return SceneDataManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return SceneDataManager.RemovedObservable.Select(_=>_.EntityId);;
            LevelDataManager = componentSystem.RegisterComponent<LevelData>();
            yield return LevelDataManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return LevelDataManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((SceneData = SceneDataManager[entityId]) == null) {
                return false;
            }
            if ((LevelData = LevelDataManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override LevelSceneData Select() {
            var item = new LevelSceneData();;
            item.EntityId = lastEntityId;
            item.SceneData = SceneData;
            item.LevelData = LevelData;
            return item;
        }
    }
}
