// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class LeaderboardWidgetGroup : ReactiveGroup<LeaderboardWidget> {
        
        private IEcsComponentManagerOf<Composite> _CompositeManager;
        
        private IEcsComponentManagerOf<LeaderboardUI> _LeaderboardUIManager;
        
        private IEcsComponentManagerOf<UIWidget> _UIWidgetManager;
        
        private int lastEntityId;
        
        private Composite Composite;
        
        private LeaderboardUI LeaderboardUI;
        
        private UIWidget UIWidget;
        
        public IEcsComponentManagerOf<Composite> CompositeManager {
            get {
                return _CompositeManager;
            }
            set {
                _CompositeManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LeaderboardUI> LeaderboardUIManager {
            get {
                return _LeaderboardUIManager;
            }
            set {
                _LeaderboardUIManager = value;
            }
        }
        
        public IEcsComponentManagerOf<UIWidget> UIWidgetManager {
            get {
                return _UIWidgetManager;
            }
            set {
                _UIWidgetManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.IComponentSystem componentSystem) {
            CompositeManager = componentSystem.RegisterComponent<Composite>();
            yield return CompositeManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return CompositeManager.RemovedObservable.Select(_=>_.EntityId);;
            LeaderboardUIManager = componentSystem.RegisterComponent<LeaderboardUI>();
            yield return LeaderboardUIManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return LeaderboardUIManager.RemovedObservable.Select(_=>_.EntityId);;
            UIWidgetManager = componentSystem.RegisterComponent<UIWidget>();
            yield return UIWidgetManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return UIWidgetManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((Composite = CompositeManager[entityId]) == null) {
                return false;
            }
            if ((LeaderboardUI = LeaderboardUIManager[entityId]) == null) {
                return false;
            }
            if ((UIWidget = UIWidgetManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override LeaderboardWidget Select() {
            var item = new LeaderboardWidget();;
            item.EntityId = lastEntityId;
            item.Composite = Composite;
            item.LeaderboardUI = LeaderboardUI;
            item.UIWidget = UIWidget;
            return item;
        }
    }
}
