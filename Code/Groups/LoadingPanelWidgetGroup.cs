// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class LoadingPanelWidgetGroup : ReactiveGroup<LoadingPanelWidget> {
        
        private IEcsComponentManagerOf<UIWidget> _UIWidgetManager;
        
        private IEcsComponentManagerOf<LoadingPanel> _LoadingPanelManager;
        
        private int lastEntityId;
        
        private UIWidget UIWidget;
        
        private LoadingPanel LoadingPanel;
        
        public IEcsComponentManagerOf<UIWidget> UIWidgetManager {
            get {
                return _UIWidgetManager;
            }
            set {
                _UIWidgetManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LoadingPanel> LoadingPanelManager {
            get {
                return _LoadingPanelManager;
            }
            set {
                _LoadingPanelManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.IComponentSystem componentSystem) {
            UIWidgetManager = componentSystem.RegisterComponent<UIWidget>();
            yield return UIWidgetManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return UIWidgetManager.RemovedObservable.Select(_=>_.EntityId);;
            LoadingPanelManager = componentSystem.RegisterComponent<LoadingPanel>();
            yield return LoadingPanelManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return LoadingPanelManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((UIWidget = UIWidgetManager[entityId]) == null) {
                return false;
            }
            if ((LoadingPanel = LoadingPanelManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override LoadingPanelWidget Select() {
            var item = new LoadingPanelWidget();;
            item.EntityId = lastEntityId;
            item.UIWidget = UIWidget;
            item.LoadingPanel = LoadingPanel;
            return item;
        }
    }
}
