// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using FlipCube;
    using Invert.Json;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using UniRx;
    using UnityEngine;
    
    
    [uFrame.Attributes.ComponentId(57)]
    [uFrame.Attributes.uFrameIdentifier("ef16c93f-aa9a-43b6-8a32-57efeaa664ca")]
    public partial class UIWidget : uFrame.ECS.EcsComponent {
        
        [UnityEngine.SerializeField()]
        private Boolean _IsActive;
        
        [UnityEngine.SerializeField()]
        private WidgetState _State;
        
        private Subject<PropertyChangedEvent<Boolean>> _IsActiveObservable;
        
        private PropertyChangedEvent<Boolean> _IsActiveEvent;
        
        private Subject<PropertyChangedEvent<WidgetState>> _StateObservable;
        
        private PropertyChangedEvent<WidgetState> _StateEvent;
        
        public override int ComponentId {
            get {
                return 57;
            }
        }
        
        public IObservable<PropertyChangedEvent<Boolean>> IsActiveObservable {
            get {
                return _IsActiveObservable ?? (_IsActiveObservable = new Subject<PropertyChangedEvent<Boolean>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<WidgetState>> StateObservable {
            get {
                return _StateObservable ?? (_StateObservable = new Subject<PropertyChangedEvent<WidgetState>>());
            }
        }
        
        public Boolean IsActive {
            get {
                return _IsActive;
            }
            set {
                SetIsActive(value);
            }
        }
        
        public WidgetState State {
            get {
                return _State;
            }
            set {
                SetState(value);
            }
        }
        
        public virtual void SetIsActive(Boolean value) {
            SetProperty(ref _IsActive, value, ref _IsActiveEvent, _IsActiveObservable);
        }
        
        public virtual void SetState(WidgetState value) {
            SetProperty(ref _State, value, ref _StateEvent, _StateObservable);
        }
    }
}
