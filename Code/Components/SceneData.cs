// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using Invert.Json;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using UniRx;
    using UnityEngine;
    
    
    [uFrame.Attributes.ComponentId(94)]
    [uFrame.Attributes.uFrameIdentifier("566a6978-9cd7-46af-87fc-aec47061377e")]
    public partial class SceneData : uFrame.ECS.EcsComponent {
        
        [UnityEngine.SerializeField()]
        private String _Name;
        
        [UnityEngine.SerializeField()]
        private SceneInstance[] _Instances;
        
        private ReactiveCollection<SceneInstance> _InstancesReactive;
        
        [UnityEngine.SerializeField()]
        private SceneData[] _Dependency;
        
        private ReactiveCollection<SceneData> _DependencyReactive;
        
        private Subject<PropertyChangedEvent<String>> _NameObservable;
        
        private PropertyChangedEvent<String> _NameEvent;
        
        public override int ComponentId {
            get {
                return 94;
            }
        }
        
        public IObservable<PropertyChangedEvent<String>> NameObservable {
            get {
                return _NameObservable ?? (_NameObservable = new Subject<PropertyChangedEvent<String>>());
            }
        }
        
        public String Name {
            get {
                return _Name;
            }
            set {
                SetName(value);
            }
        }
        
        public ReactiveCollection<SceneInstance> Instances {
            get {
                if (_InstancesReactive == null) {
                    _InstancesReactive = new ReactiveCollection<SceneInstance>(_Instances ?? new SceneInstance[] { });
                }
                return _InstancesReactive;
            }
        }
        
        public ReactiveCollection<SceneData> Dependency {
            get {
                if (_DependencyReactive == null) {
                    _DependencyReactive = new ReactiveCollection<SceneData>(_Dependency ?? new SceneData[] { });
                }
                return _DependencyReactive;
            }
        }
        
        public virtual void SetName(String value) {
            SetProperty(ref _Name, value, ref _NameEvent, _NameObservable);
        }
    }
}
