// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace FlipCube {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using FlipCube;
    using UnityEngine;
    using uFrame.ECS;
    using Invert.Json;
    using UniRx;
    
    
    [uFrame.Attributes.ComponentId(38)]
    [uFrame.Attributes.uFrameIdentifier("49ed953d-f15a-4bf4-889a-0f1c53c5086b")]
    public partial class Roller : uFrame.ECS.EcsComponent {
        
        [UnityEngine.SerializeField()]
        private Boolean _IsRolling;
        
        [UnityEngine.SerializeField()]
        private RollStart _LastRoll;
        
        [UnityEngine.SerializeField()]
        private Single _RollSpeed;
        
        [UnityEngine.SerializeField()]
        private RollerState _RestState;
        
        [UnityEngine.SerializeField()]
        private Vector3 _BottomBackPosition;
        
        [UnityEngine.SerializeField()]
        private Vector3 _BottomForwardPosition;
        
        [UnityEngine.SerializeField()]
        private Vector3 _BottomRightPosition;
        
        [UnityEngine.SerializeField()]
        private Vector3 _BottomLeftPosition;
        
        private Subject<PropertyChangedEvent<Boolean>> _IsRollingObservable;
        
        private PropertyChangedEvent<Boolean> _IsRollingEvent;
        
        private Subject<PropertyChangedEvent<RollStart>> _LastRollObservable;
        
        private PropertyChangedEvent<RollStart> _LastRollEvent;
        
        private Subject<PropertyChangedEvent<Single>> _RollSpeedObservable;
        
        private PropertyChangedEvent<Single> _RollSpeedEvent;
        
        private Subject<PropertyChangedEvent<RollerState>> _RestStateObservable;
        
        private PropertyChangedEvent<RollerState> _RestStateEvent;
        
        private Subject<PropertyChangedEvent<Vector3>> _BottomBackPositionObservable;
        
        private PropertyChangedEvent<Vector3> _BottomBackPositionEvent;
        
        private Subject<PropertyChangedEvent<Vector3>> _BottomForwardPositionObservable;
        
        private PropertyChangedEvent<Vector3> _BottomForwardPositionEvent;
        
        private Subject<PropertyChangedEvent<Vector3>> _BottomRightPositionObservable;
        
        private PropertyChangedEvent<Vector3> _BottomRightPositionEvent;
        
        private Subject<PropertyChangedEvent<Vector3>> _BottomLeftPositionObservable;
        
        private PropertyChangedEvent<Vector3> _BottomLeftPositionEvent;
        
        public override int ComponentId {
            get {
                return 38;
            }
        }
        
        public IObservable<PropertyChangedEvent<Boolean>> IsRollingObservable {
            get {
                return _IsRollingObservable ?? (_IsRollingObservable = new Subject<PropertyChangedEvent<Boolean>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<RollStart>> LastRollObservable {
            get {
                return _LastRollObservable ?? (_LastRollObservable = new Subject<PropertyChangedEvent<RollStart>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Single>> RollSpeedObservable {
            get {
                return _RollSpeedObservable ?? (_RollSpeedObservable = new Subject<PropertyChangedEvent<Single>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<RollerState>> RestStateObservable {
            get {
                return _RestStateObservable ?? (_RestStateObservable = new Subject<PropertyChangedEvent<RollerState>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Vector3>> BottomBackPositionObservable {
            get {
                return _BottomBackPositionObservable ?? (_BottomBackPositionObservable = new Subject<PropertyChangedEvent<Vector3>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Vector3>> BottomForwardPositionObservable {
            get {
                return _BottomForwardPositionObservable ?? (_BottomForwardPositionObservable = new Subject<PropertyChangedEvent<Vector3>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Vector3>> BottomRightPositionObservable {
            get {
                return _BottomRightPositionObservable ?? (_BottomRightPositionObservable = new Subject<PropertyChangedEvent<Vector3>>());
            }
        }
        
        public IObservable<PropertyChangedEvent<Vector3>> BottomLeftPositionObservable {
            get {
                return _BottomLeftPositionObservable ?? (_BottomLeftPositionObservable = new Subject<PropertyChangedEvent<Vector3>>());
            }
        }
        
        public Boolean IsRolling {
            get {
                return _IsRolling;
            }
            set {
                SetIsRolling(value);
            }
        }
        
        public RollStart LastRoll {
            get {
                return _LastRoll;
            }
            set {
                SetLastRoll(value);
            }
        }
        
        public Single RollSpeed {
            get {
                return _RollSpeed;
            }
            set {
                SetRollSpeed(value);
            }
        }
        
        public RollerState RestState {
            get {
                return _RestState;
            }
            set {
                SetRestState(value);
            }
        }
        
        public Vector3 BottomBackPosition {
            get {
                return _BottomBackPosition;
            }
            set {
                SetBottomBackPosition(value);
            }
        }
        
        public Vector3 BottomForwardPosition {
            get {
                return _BottomForwardPosition;
            }
            set {
                SetBottomForwardPosition(value);
            }
        }
        
        public Vector3 BottomRightPosition {
            get {
                return _BottomRightPosition;
            }
            set {
                SetBottomRightPosition(value);
            }
        }
        
        public Vector3 BottomLeftPosition {
            get {
                return _BottomLeftPosition;
            }
            set {
                SetBottomLeftPosition(value);
            }
        }
        
        public virtual void SetIsRolling(Boolean value) {
            SetProperty(ref _IsRolling, value, ref _IsRollingEvent, _IsRollingObservable);
        }
        
        public virtual void SetLastRoll(RollStart value) {
            SetProperty(ref _LastRoll, value, ref _LastRollEvent, _LastRollObservable);
        }
        
        public virtual void SetRollSpeed(Single value) {
            SetProperty(ref _RollSpeed, value, ref _RollSpeedEvent, _RollSpeedObservable);
        }
        
        public virtual void SetRestState(RollerState value) {
            SetProperty(ref _RestState, value, ref _RestStateEvent, _RestStateObservable);
        }
        
        public virtual void SetBottomBackPosition(Vector3 value) {
            SetProperty(ref _BottomBackPosition, value, ref _BottomBackPositionEvent, _BottomBackPositionObservable);
        }
        
        public virtual void SetBottomForwardPosition(Vector3 value) {
            SetProperty(ref _BottomForwardPosition, value, ref _BottomForwardPositionEvent, _BottomForwardPositionObservable);
        }
        
        public virtual void SetBottomRightPosition(Vector3 value) {
            SetProperty(ref _BottomRightPosition, value, ref _BottomRightPositionEvent, _BottomRightPositionObservable);
        }
        
        public virtual void SetBottomLeftPosition(Vector3 value) {
            SetProperty(ref _BottomLeftPosition, value, ref _BottomLeftPositionEvent, _BottomLeftPositionObservable);
        }
    }
}
