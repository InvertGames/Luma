// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class FlipCubeSoundSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( FlipCubeGameSystemEvents.GameOver, GameOver );
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
        game.EventManager.ListenFor( SwitchPlateSystemEvents.PlateActivatedOn, PlateActivatedOn );
        game.EventManager.ListenFor( SwitchPlateSystemEvents.PlateActivatedOff, PlateActivatedOff );
        game.EventManager.ListenFor( CubeSystemEvents.RollBegin, RollBegin );
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( UnityEvents.CollisionEnter, CollisionEnter );
        game.EventManager.ListenFor( TeliporterSystemEvents.Teliporting, Teliporting );
        game.EventManager.ListenFor( CubeSystemEvents.CubeMoved, CubeMoved );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        OnCubeEnter(e);
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeft(e);
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
        OnCubeFall(e);
    }
    
    protected virtual void GameOver(Invert.ECS.IEvent e) {
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlateActivatedOn(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlateActivatedOff(Invert.ECS.IEvent e) {
    }
    
    protected virtual void RollBegin(Invert.ECS.IEvent e) {
        OnRollBegin(e);
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
        OnRollComplete(e);
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void CollisionEnter(Invert.ECS.IEvent e) {
        OnComplete(e);
    }
    
    protected virtual void Teliporting(Invert.ECS.IEvent e) {
        OnTeliporting(e);
    }
    
    protected virtual void CubeMoved(Invert.ECS.IEvent e) {
        OnCubeMoved(e);
    }
    
    protected virtual void OnCubeEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeEnter(eventData, plate);
    }
    
    protected virtual void OnCubeEnter(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void OnCubeLeft(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeLeft(eventData, plate);
    }
    
    protected virtual void OnCubeLeft(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void OnCubeFall(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnCubeFall(eventData, cube);
    }
    
    protected virtual void OnCubeFall(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnRollBegin(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnRollBegin(eventData, cube);
    }
    
    protected virtual void OnRollBegin(RollEventData data, Cube cube) {
    }
    
    protected virtual void OnRollComplete(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        this.OnRollComplete(eventData);
    }
    
    protected virtual void OnRollComplete(RollEventData data) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnReset(eventData, cube);
    }
    
    protected virtual void OnReset(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnComplete(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(eventData.ColliderId, out goalplate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CollideeId, out cube)) {
            return;
        }
        this.OnComplete(eventData, goalplate, cube);
    }
    
    protected virtual void OnComplete(CollisionEventData data, GoalPlate goalplate, Cube cube) {
    }
    
    protected virtual void OnTeliporting(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnTeliporting(eventData);
    }
    
    protected virtual void OnTeliporting(EntityEventData data) {
    }
    
    protected virtual void OnCubeMoved(Invert.ECS.IEvent e) {
        var eventData = (MoveCubeData)e.Data;
        this.OnCubeMoved(eventData);
    }
    
    protected virtual void OnCubeMoved(MoveCubeData data) {
    }
}

public enum FlipCubeSoundSystemEvents {
}
