// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class PlateSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<YingYangPlate> _YingYangPlateManager;
    
    private ComponentManager<DisableColliderOnCollision> _DisableColliderOnCollisionManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<YingYangPlate> YingYangPlateManager {
        get {
            return _YingYangPlateManager;
        }
        set {
            _YingYangPlateManager = value;
        }
    }
    
    public ComponentManager<DisableColliderOnCollision> DisableColliderOnCollisionManager {
        get {
            return _DisableColliderOnCollisionManager;
        }
        set {
            _DisableColliderOnCollisionManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        YingYangPlateManager = game.ComponentSystem.RegisterComponent<YingYangPlate>();
        DisableColliderOnCollisionManager = game.ComponentSystem.RegisterComponent<DisableColliderOnCollision>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( UnityEvents.CollisionEnter, CollisionEnter );
        game.EventManager.ListenFor( UnityEvents.CollisionExit, CollisionExit );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        DisableColliderCollsion(e);
        SplitCube(e);
    }
    
    protected virtual void CollisionEnter(Invert.ECS.IEvent e) {
        PlateEnter(e);
    }
    
    protected virtual void CollisionExit(Invert.ECS.IEvent e) {
        PlateExit(e);
    }
    
    protected virtual void DisableColliderCollsion(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        DisableColliderOnCollision disablecollideroncollision;
        if (!Game.ComponentSystem.TryGetComponent<DisableColliderOnCollision>(eventData.PlateId, out disablecollideroncollision)) {
            return;
        }
        this.DisableColliderCollsion(eventData, disablecollideroncollision);
    }
    
    protected virtual void DisableColliderCollsion(PlateCubeCollsion data, DisableColliderOnCollision disablecollideroncollision) {
    }
    
    protected virtual void SplitCube(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        YingYangPlate yingyangplate;
        if (!Game.ComponentSystem.TryGetComponent<YingYangPlate>(eventData.PlateId, out yingyangplate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        Plate[] plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(yingyangplate.TargetPlates, out plate)) {
            return;
        }
        this.SplitCube(eventData, yingyangplate, cube, plate);
    }
    
    protected virtual void SplitCube(PlateCubeCollsion data, YingYangPlate yingyangplate, Cube cube, Plate[] plate) {
    }
    
    protected virtual void PlateEnter(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.ColliderId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CollideeId, out cube)) {
            return;
        }
        this.PlateEnter(eventData, plate, cube);
        PlateCubeCollsion cubeenteredData = new PlateCubeCollsion();
        cubeenteredData.CubeId = cube.EntityId;
        cubeenteredData.PlateId = plate.EntityId;
        PlateSystem.SignalCubeEntered(this.Game, cubeenteredData);
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(plate.EntityId, out rollable)) {
            return;
        }
        this.IsRollable(rollable, plate, cube);
        if (rollable.RestState == RollerState.StandingUp) {
            PlateCubeCollsion rollcompletedstandingupData = new PlateCubeCollsion();
            rollcompletedstandingupData.CubeId = cube.EntityId;
            rollcompletedstandingupData.PlateId = plate.EntityId;
            CubeGravitySystem.SignalRollCompletedStandingUp(this.Game, rollcompletedstandingupData);
        }
    }
    
    protected virtual void PlateEnter(CollisionEventData data, Plate plate, Cube cube) {
    }
    
    protected virtual void IsRollable(Rollable rollable, Plate plate, Cube cube) {
    }
    
    protected virtual void PlateExit(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.CollideeId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.ColliderId, out cube)) {
            return;
        }
        this.PlateExit(eventData, plate, cube);
        PlateCubeCollsion cubeleftData = new PlateCubeCollsion();
        cubeleftData.CubeId = cube.EntityId;
        cubeleftData.PlateId = plate.EntityId;
        PlateSystem.SignalCubeLeft(this.Game, cubeleftData);
    }
    
    protected virtual void PlateExit(CollisionEventData data, Plate plate, Cube cube) {
    }
    
    public virtual void SignalCubeEntered(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEntered,data));
    }
    
    public virtual void SignalCubeLeft(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeLeft,data));
    }
    
    public virtual void SignalGoalPlateHit(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.GoalPlateHit,data));
    }
    
    public virtual void SignalSwitchPlateHit(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.SwitchPlateHit,data));
    }
    
    public virtual void SignalCubeEnteredStandingUp(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEnteredStandingUp,data));
    }
    
    public static void SignalCubeEntered(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEntered,data));
    }
    
    public static void SignalCubeLeft(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeLeft,data));
    }
    
    public static void SignalGoalPlateHit(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.GoalPlateHit,data));
    }
    
    public static void SignalSwitchPlateHit(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.SwitchPlateHit,data));
    }
    
    public static void SignalCubeEnteredStandingUp(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEnteredStandingUp,data));
    }
}

public enum PlateSystemEvents {
    
    CubeEntered,
    
    CubeLeft,
    
    GoalPlateHit,
    
    SwitchPlateHit,
    
    CubeEnteredStandingUp,
}

public class TeliporterSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Teliporter> _TeliporterManager;
    
    private ComponentManager<Teliportable> _TeliportableManager;
    
    private ComponentManager<TeliporterTarget> _TeliporterTargetManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Teliporter> TeliporterManager {
        get {
            return _TeliporterManager;
        }
        set {
            _TeliporterManager = value;
        }
    }
    
    public ComponentManager<Teliportable> TeliportableManager {
        get {
            return _TeliportableManager;
        }
        set {
            _TeliportableManager = value;
        }
    }
    
    public ComponentManager<TeliporterTarget> TeliporterTargetManager {
        get {
            return _TeliporterTargetManager;
        }
        set {
            _TeliporterTargetManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        TeliporterManager = game.ComponentSystem.RegisterComponent<Teliporter>();
        TeliportableManager = game.ComponentSystem.RegisterComponent<Teliportable>();
        TeliporterTargetManager = game.ComponentSystem.RegisterComponent<TeliporterTarget>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        HandleCollision(e);
    }
    
    protected virtual void HandleCollision(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        Teliporter teliporter;
        if (!Game.ComponentSystem.TryGetComponent<Teliporter>(eventData.PlateId, out teliporter)) {
            return;
        }
        this.HandleCollision(eventData, cube, teliporter);
        EntityEventData teliportingData = new EntityEventData();
        teliportingData.EntityId = cube.EntityId;
        TeliporterSystem.SignalTeliporting(this.Game, teliportingData);
    }
    
    protected virtual void HandleCollision(PlateCubeCollsion data, Cube cube, Teliporter teliporter) {
    }
    
    public virtual void SignalTeliporting(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(TeliporterSystemEvents.Teliporting,data));
    }
    
    public static void SignalTeliporting(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(TeliporterSystemEvents.Teliporting,data));
    }
}

public enum TeliporterSystemEvents {
    
    Teliporting,
}

public class SwitchPlateSystemBase : UnitySystem {
    
    private ComponentManager<SwitchPlateTrigger> _SwitchPlateTriggerManager;
    
    private ComponentManager<SwitchPlateTarget> _SwitchPlateTargetManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<SwitchOnWithXp> _SwitchOnWithXpManager;
    
    public ComponentManager<SwitchPlateTrigger> SwitchPlateTriggerManager {
        get {
            return _SwitchPlateTriggerManager;
        }
        set {
            _SwitchPlateTriggerManager = value;
        }
    }
    
    public ComponentManager<SwitchPlateTarget> SwitchPlateTargetManager {
        get {
            return _SwitchPlateTargetManager;
        }
        set {
            _SwitchPlateTargetManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<SwitchOnWithXp> SwitchOnWithXpManager {
        get {
            return _SwitchOnWithXpManager;
        }
        set {
            _SwitchOnWithXpManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        SwitchPlateTriggerManager = game.ComponentSystem.RegisterComponent<SwitchPlateTrigger>();
        SwitchPlateTargetManager = game.ComponentSystem.RegisterComponent<SwitchPlateTarget>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        SwitchOnWithXpManager = game.ComponentSystem.RegisterComponent<SwitchOnWithXp>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerLoaded, PlayerLoaded );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        ActivateSwitchPlate(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlayerLoaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ActivateSwitchPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        SwitchPlateTrigger switchplatetrigger;
        if (!Game.ComponentSystem.TryGetComponent<SwitchPlateTrigger>(eventData.PlateId, out switchplatetrigger)) {
            return;
        }
        this.ActivateSwitchPlate(eventData, switchplatetrigger);
    }
    
    protected virtual void ActivateSwitchPlate(PlateCubeCollsion data, SwitchPlateTrigger switchplatetrigger) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    public virtual void SignalPlateActivatedOn(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOn,data));
    }
    
    public virtual void SignalPlateActivatedOff(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOff,data));
    }
    
    public static void SignalPlateActivatedOn(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOn,data));
    }
    
    public static void SignalPlateActivatedOff(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOff,data));
    }
}

public enum SwitchPlateSystemEvents {
    
    PlateActivatedOn,
    
    PlateActivatedOff,
}

public class ShiftingPlateBase : UnitySystem {
    
    private ComponentManager<MoveLeftOnLeave> _MoveLeftOnLeaveManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<TransporterPlate> _TransporterPlateManager;
    
    public ComponentManager<MoveLeftOnLeave> MoveLeftOnLeaveManager {
        get {
            return _MoveLeftOnLeaveManager;
        }
        set {
            _MoveLeftOnLeaveManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<TransporterPlate> TransporterPlateManager {
        get {
            return _TransporterPlateManager;
        }
        set {
            _TransporterPlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        MoveLeftOnLeaveManager = game.ComponentSystem.RegisterComponent<MoveLeftOnLeave>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        TransporterPlateManager = game.ComponentSystem.RegisterComponent<TransporterPlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeave(e);
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        OnRollCompleted(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void OnCubeLeave(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        MoveLeftOnLeave moveleftonleave;
        if (!Game.ComponentSystem.TryGetComponent<MoveLeftOnLeave>(eventData.PlateId, out moveleftonleave)) {
            return;
        }
        this.OnCubeLeave(eventData, moveleftonleave);
    }
    
    protected virtual void OnCubeLeave(PlateCubeCollsion data, MoveLeftOnLeave moveleftonleave) {
    }
    
    protected virtual void OnRollCompleted(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        TransporterPlate transporterplate;
        if (!Game.ComponentSystem.TryGetComponent<TransporterPlate>(eventData.PlateId, out transporterplate)) {
            return;
        }
        this.OnRollCompleted(eventData, cube, transporterplate);
    }
    
    protected virtual void OnRollCompleted(PlateCubeCollsion data, Cube cube, TransporterPlate transporterplate) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
}

public enum ShiftingPlateEvents {
}

public class GoalPlateSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    private ComponentManager<TurnGravityOnEnter> _TurnGravityOnEnterManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public ComponentManager<TurnGravityOnEnter> TurnGravityOnEnterManager {
        get {
            return _TurnGravityOnEnterManager;
        }
        set {
            _TurnGravityOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        TurnGravityOnEnterManager = game.ComponentSystem.RegisterComponent<TurnGravityOnEnter>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        OnGoalPlate(e);
        GravityOnEnter(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnGoalPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(plate.EntityId, out goalplate)) {
            return;
        }
        this.OnGoalPlate(eventData, plate, cube, goalplate);
        PlateCubeCollsion goalplatehitData = new PlateCubeCollsion();
        goalplatehitData.CubeId = cube.EntityId;
        goalplatehitData.PlateId = plate.EntityId;
        PlateSystem.SignalGoalPlateHit(this.Game, goalplatehitData);
    }
    
    protected virtual void OnGoalPlate(PlateCubeCollsion data, Plate plate, Cube cube, GoalPlate goalplate) {
    }
    
    protected virtual void GravityOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TurnGravityOnEnter turngravityonenter;
        if (!Game.ComponentSystem.TryGetComponent<TurnGravityOnEnter>(eventData.PlateId, out turngravityonenter)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        this.GravityOnEnter(eventData, turngravityonenter, cube);
    }
    
    protected virtual void GravityOnEnter(PlateCubeCollsion data, TurnGravityOnEnter turngravityonenter, Cube cube) {
    }
}

public enum GoalPlateSystemEvents {
}

public class DissolvePlateSystemBase : UnitySystem {
    
    private ComponentManager<DissolvePlate> _DissolvePlateManager;
    
    public ComponentManager<DissolvePlate> DissolvePlateManager {
        get {
            return _DissolvePlateManager;
        }
        set {
            _DissolvePlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        DissolvePlateManager = game.ComponentSystem.RegisterComponent<DissolvePlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnDissolve(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void OnDissolve(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        DissolvePlate dissolveplate;
        if (!Game.ComponentSystem.TryGetComponent<DissolvePlate>(eventData.PlateId, out dissolveplate)) {
            return;
        }
        this.OnDissolve(eventData, dissolveplate);
    }
    
    protected virtual void OnDissolve(PlateCubeCollsion data, DissolvePlate dissolveplate) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
}

public enum DissolvePlateSystemEvents {
}
