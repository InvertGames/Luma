// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class SpecialFXSystemBase : UnitySystem {
    
    private ComponentManager<TweenPlateColors> _TweenPlateColorsManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    private ComponentManager<Teliporter> _TeliporterManager;
    
    public ComponentManager<TweenPlateColors> TweenPlateColorsManager {
        get {
            return _TweenPlateColorsManager;
        }
        set {
            _TweenPlateColorsManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public ComponentManager<Teliporter> TeliporterManager {
        get {
            return _TeliporterManager;
        }
        set {
            _TeliporterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        TweenPlateColorsManager = game.ComponentSystem.RegisterComponent<TweenPlateColors>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        TeliporterManager = game.ComponentSystem.RegisterComponent<Teliporter>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( TeliporterSystemEvents.Teliporting, Teliporting );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        OnCubeEntered(e);
        TweenPlateOn(e);
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeft(e);
        TweenPlateOff(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnCubeReset(e);
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
        OnGoalPlate(e);
    }
    
    protected virtual void Teliporting(Invert.ECS.IEvent e) {
        OnTeliporting(e);
    }
    
    protected virtual void OnCubeEntered(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeEntered(eventData, plate);
    }
    
    protected virtual void OnCubeEntered(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void TweenPlateOn(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TweenPlateColors tweenplatecolors;
        if (!Game.ComponentSystem.TryGetComponent<TweenPlateColors>(eventData.PlateId, out tweenplatecolors)) {
            return;
        }
        this.TweenPlateOn(eventData, tweenplatecolors);
    }
    
    protected virtual void TweenPlateOn(PlateCubeCollsion data, TweenPlateColors tweenplatecolors) {
    }
    
    protected virtual void OnCubeLeft(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeLeft(eventData, plate);
    }
    
    protected virtual void OnCubeLeft(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void TweenPlateOff(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TweenPlateColors tweenplatecolors;
        if (!Game.ComponentSystem.TryGetComponent<TweenPlateColors>(eventData.PlateId, out tweenplatecolors)) {
            return;
        }
        this.TweenPlateOff(eventData, tweenplatecolors);
    }
    
    protected virtual void TweenPlateOff(PlateCubeCollsion data, TweenPlateColors tweenplatecolors) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    protected virtual void OnCubeReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnCubeReset(eventData, cube);
    }
    
    protected virtual void OnCubeReset(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnGoalPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(eventData.PlateId, out goalplate)) {
            return;
        }
        this.OnGoalPlate(eventData, goalplate);
    }
    
    protected virtual void OnGoalPlate(PlateCubeCollsion data, GoalPlate goalplate) {
    }
    
    protected virtual void OnTeliporting(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Teliporter teliporter;
        if (!Game.ComponentSystem.TryGetComponent<Teliporter>(eventData.EntityId, out teliporter)) {
            return;
        }
        this.OnTeliporting(eventData, teliporter);
    }
    
    protected virtual void OnTeliporting(EntityEventData data, Teliporter teliporter) {
    }
}

public enum SpecialFXSystemEvents {
}
