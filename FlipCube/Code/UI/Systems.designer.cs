// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class FlipCubeUISystemBase : UnitySystem {
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<LevelScene> _LevelSceneManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<LevelScene> LevelSceneManager {
        get {
            return _LevelSceneManager;
        }
        set {
            _LevelSceneManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        LevelSceneManager = game.ComponentSystem.RegisterComponent<LevelScene>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( NotificationSystemEvents.Display, Display );
        game.EventManager.ListenFor( FrameworkEvents.LoadingProgress, LoadingProgress );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameReady, GameReady );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
    }
    
    protected virtual void Display(Invert.ECS.IEvent e) {
        ShowNotification(e);
    }
    
    protected virtual void LoadingProgress(Invert.ECS.IEvent e) {
        OnLoadingProgress(e);
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnLevelEntered(e);
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnZoneEntered(e);
    }
    
    protected virtual void GameReady(Invert.ECS.IEvent e) {
        OnGameReady(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
        OnXpChanged(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ShowNotification(Invert.ECS.IEvent e) {
        var eventData = (NotificationData)e.Data;
        this.ShowNotification(eventData);
    }
    
    protected virtual void ShowNotification(NotificationData data) {
    }
    
    protected virtual void OnLoadingProgress(Invert.ECS.IEvent e) {
        var eventData = (LoadingProgressData)e.Data;
        this.OnLoadingProgress(eventData);
    }
    
    protected virtual void OnLoadingProgress(LoadingProgressData data) {
    }
    
    protected virtual void OnLevelEntered(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnLevelEntered(eventData);
    }
    
    protected virtual void OnLevelEntered(LevelEventData data) {
    }
    
    protected virtual void OnZoneEntered(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnZoneEntered(eventData);
    }
    
    protected virtual void OnZoneEntered(ZoneEventData data) {
    }
    
    protected virtual void OnGameReady(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnGameReady(eventData);
    }
    
    protected virtual void OnGameReady(EntityEventData data) {
    }
    
    protected virtual void OnXpChanged(Invert.ECS.IEvent e) {
        var eventData = (PlayerExperienceData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.PlayerId, out player)) {
            return;
        }
        this.OnXpChanged(eventData, player);
    }
    
    protected virtual void OnXpChanged(PlayerExperienceData data, Player player) {
    }
}

public enum FlipCubeUISystemEvents {
}

public class HUDSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public enum HUDSystemEvents {
}

public class WindowSystemBase : UnitySystem {
    
    private ComponentManager<Window> _WindowManager;
    
    private ComponentManager<ToggleWindowOnClick> _ToggleWindowOnClickManager;
    
    private ComponentManager<CloseWindowOnClick> _CloseWindowOnClickManager;
    
    public ComponentManager<Window> WindowManager {
        get {
            return _WindowManager;
        }
        set {
            _WindowManager = value;
        }
    }
    
    public ComponentManager<ToggleWindowOnClick> ToggleWindowOnClickManager {
        get {
            return _ToggleWindowOnClickManager;
        }
        set {
            _ToggleWindowOnClickManager = value;
        }
    }
    
    public ComponentManager<CloseWindowOnClick> CloseWindowOnClickManager {
        get {
            return _CloseWindowOnClickManager;
        }
        set {
            _CloseWindowOnClickManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        WindowManager = game.ComponentSystem.RegisterComponent<Window>();
        ToggleWindowOnClickManager = game.ComponentSystem.RegisterComponent<ToggleWindowOnClick>();
        CloseWindowOnClickManager = game.ComponentSystem.RegisterComponent<CloseWindowOnClick>();
        game.EventManager.ListenFor( WindowSystemEvents.ShowWindow, ShowWindow );
        game.EventManager.ListenFor( WindowSystemEvents.CloseWindow, CloseWindow );
        game.EventManager.ListenFor( WindowSystemEvents.ToggleWindow, ToggleWindow );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( uGUIEvents.Click, Click );
    }
    
    protected virtual void ShowWindow(Invert.ECS.IEvent e) {
        HandleShowWindow(e);
    }
    
    protected virtual void CloseWindow(Invert.ECS.IEvent e) {
        HandleCloseWindow(e);
    }
    
    protected virtual void ToggleWindow(Invert.ECS.IEvent e) {
        HandleToggleWindow(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
        OnLoaded(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
        OnComponentCreated(e);
    }
    
    protected virtual void Click(Invert.ECS.IEvent e) {
        OnClick(e);
        OnToggleWindowClick(e);
        OnCloseWindowClick(e);
    }
    
    protected virtual void HandleShowWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleShowWindow(eventData);
    }
    
    protected virtual void HandleShowWindow(WindowEventData data) {
    }
    
    protected virtual void HandleCloseWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleCloseWindow(eventData);
    }
    
    protected virtual void HandleCloseWindow(WindowEventData data) {
    }
    
    protected virtual void HandleToggleWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleToggleWindow(eventData);
    }
    
    protected virtual void HandleToggleWindow(WindowEventData data) {
    }
    
    protected virtual void OnLoaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnLoaded() {
    }
    
    protected virtual void OnComponentCreated(Invert.ECS.IEvent e) {
        var eventData = (IComponent)e.Data;
        this.OnComponentCreated(eventData);
    }
    
    protected virtual void OnComponentCreated(IComponent data) {
    }
    
    protected virtual void OnClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(eventData.EntityId, out window)) {
            return;
        }
        this.OnClick(eventData, window);
        if (eventData.Name == "Close") {
            WindowEventData closewindowData = new WindowEventData();
            closewindowData.Window = window.WindowType;
            WindowSystem.SignalCloseWindow(this.Game, closewindowData);
        }
    }
    
    protected virtual void OnClick(UIEventData data, Window window) {
    }
    
    protected virtual void OnToggleWindowClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        ToggleWindowOnClick togglewindowonclick;
        if (!Game.ComponentSystem.TryGetComponent<ToggleWindowOnClick>(eventData.EntityId, out togglewindowonclick)) {
            return;
        }
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(togglewindowonclick.WindowId, out window)) {
            return;
        }
        this.OnToggleWindowClick(eventData, togglewindowonclick, window);
        WindowEventData togglewindowData = new WindowEventData();
        togglewindowData.Window = window.WindowType;
        WindowSystem.SignalToggleWindow(this.Game, togglewindowData);
    }
    
    protected virtual void OnToggleWindowClick(UIEventData data, ToggleWindowOnClick togglewindowonclick, Window window) {
    }
    
    protected virtual void OnCloseWindowClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        CloseWindowOnClick closewindowonclick;
        if (!Game.ComponentSystem.TryGetComponent<CloseWindowOnClick>(eventData.EntityId, out closewindowonclick)) {
            return;
        }
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(closewindowonclick.WindowId, out window)) {
            return;
        }
        this.OnCloseWindowClick(eventData, closewindowonclick, window);
        WindowEventData closewindowData = new WindowEventData();
        closewindowData.Window = window.WindowType;
        WindowSystem.SignalCloseWindow(this.Game, closewindowData);
    }
    
    protected virtual void OnCloseWindowClick(UIEventData data, CloseWindowOnClick closewindowonclick, Window window) {
    }
    
    public virtual void SignalShowWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ShowWindow,data));
    }
    
    public virtual void SignalCloseWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.CloseWindow,data));
    }
    
    public virtual void SignalToggleWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ToggleWindow,data));
    }
    
    public static void SignalShowWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ShowWindow,data));
    }
    
    public static void SignalCloseWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.CloseWindow,data));
    }
    
    public static void SignalToggleWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ToggleWindow,data));
    }
}

public enum WindowSystemEvents {
    
    ShowWindow,
    
    CloseWindow,
    
    ToggleWindow,
}

public class ZonesWindowSystemBase : UnitySystem {
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameDataReady, GameDataReady );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
    }
    
    protected virtual void GameDataReady(Invert.ECS.IEvent e) {
        OnLoadData(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnLoadData(Invert.ECS.IEvent e) {
        var eventData = (GameReadyData)e.Data;
        this.OnLoadData(eventData);
    }
    
    protected virtual void OnLoadData(GameReadyData data) {
    }
}

public enum ZonesWindowSystemEvents {
}

public class FriendsWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public enum FriendsWindowSystemEvents {
}

public class ProfileWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public enum ProfileWindowSystemEvents {
}

public class AccountWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public enum AccountWindowSystemEvents {
}
