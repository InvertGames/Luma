// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class CameraSystemBase : UnitySystem {
    
    private ComponentManager<FollowOnSelection> _FollowOnSelectionManager;
    
    public ComponentManager<FollowOnSelection> FollowOnSelectionManager {
        get {
            return _FollowOnSelectionManager;
        }
        set {
            _FollowOnSelectionManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        FollowOnSelectionManager = game.ComponentSystem.RegisterComponent<FollowOnSelection>();
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
        OnSelection(e);
    }
    
    protected virtual void OnSelection(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        FollowOnSelection followonselection;
        if (!Game.ComponentSystem.TryGetComponent<FollowOnSelection>(eventData.EntityId, out followonselection)) {
            return;
        }
        this.OnSelection(eventData, followonselection);
    }
    
    protected virtual void OnSelection(EntityEventData data, FollowOnSelection followonselection) {
    }
}

public enum CameraSystemEvents {
}

public class NotificationSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
    
    public virtual void SignalDisplay(NotificationData data) {
        Game.EventManager.SignalEvent(new EventData(NotificationSystemEvents.Display,data));
    }
    
    public static void SignalDisplay(IGame game, NotificationData data) {
        game.EventManager.SignalEvent(new EventData(NotificationSystemEvents.Display,data));
    }
}

public enum NotificationSystemEvents {
    
    Display,
}

public class XPSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
    }
}

public enum XPSystemEvents {
}

public class ScoringSystemBase : UnitySystem {
    
    private ComponentManager<Scoring> _ScoringManager;
    
    public ComponentManager<Scoring> ScoringManager {
        get {
            return _ScoringManager;
        }
        set {
            _ScoringManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ScoringManager = game.ComponentSystem.RegisterComponent<Scoring>();
    }
    
    public virtual void SignalAddToScore(Int32 data) {
        Game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.AddToScore,data));
    }
    
    public virtual void SignalRemoveFromScore(Int32 data) {
        Game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.RemoveFromScore,data));
    }
    
    public static void SignalAddToScore(IGame game, Int32 data) {
        game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.AddToScore,data));
    }
    
    public static void SignalRemoveFromScore(IGame game, Int32 data) {
        game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.RemoveFromScore,data));
    }
}

public enum ScoringSystemEvents {
    
    AddToScore,
    
    RemoveFromScore,
}
