// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class CubeSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        game.EventManager.ListenFor( CubeInputSystemEvents.L, L );
        game.EventManager.ListenFor( CubeInputSystemEvents.F, F );
        game.EventManager.ListenFor( CubeInputSystemEvents.B, B );
        game.EventManager.ListenFor( CubeInputSystemEvents.R, R );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( CubeSystemEvents.MoveTo, MoveTo );
        game.EventManager.ListenFor( CubeSystemEvents.SplitCube, SplitCube );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RolledNextToCube, RolledNextToCube );
    }
    
    protected virtual void L(Invert.ECS.IEvent e) {
        OnLeft(e);
    }
    
    protected virtual void F(Invert.ECS.IEvent e) {
        OnForward(e);
    }
    
    protected virtual void B(Invert.ECS.IEvent e) {
        OnBackwards(e);
    }
    
    protected virtual void R(Invert.ECS.IEvent e) {
        OnRight(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void MoveTo(Invert.ECS.IEvent e) {
        MoveCube(e);
    }
    
    protected virtual void SplitCube(Invert.ECS.IEvent e) {
        OnSplit(e);
    }
    
    protected virtual void RolledNextToCube(Invert.ECS.IEvent e) {
        OnNextToCube(e);
    }
    
    protected virtual void OnLeft(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnLeft(eventData, rollable);
    }
    
    protected virtual void OnLeft(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnForward(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnForward(eventData, rollable);
    }
    
    protected virtual void OnForward(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnBackwards(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnBackwards(eventData, rollable);
    }
    
    protected virtual void OnBackwards(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnRight(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnRight(eventData, rollable);
    }
    
    protected virtual void OnRight(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnReset(eventData, rollable);
    }
    
    protected virtual void OnReset(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void MoveCube(Invert.ECS.IEvent e) {
        var eventData = (MoveCubeData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeId, out rollable)) {
            return;
        }
        this.MoveCube(eventData, rollable);
    }
    
    protected virtual void MoveCube(MoveCubeData data, Rollable rollable) {
    }
    
    protected virtual void OnSplit(Invert.ECS.IEvent e) {
        var eventData = (SplitCubeData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeId, out rollable)) {
            return;
        }
        this.OnSplit(eventData, rollable);
    }
    
    protected virtual void OnSplit(SplitCubeData data, Rollable rollable) {
    }
    
    protected virtual void OnNextToCube(Invert.ECS.IEvent e) {
        var eventData = (CubeInteractionData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeA, out rollable)) {
            return;
        }
        this.OnNextToCube(eventData, rollable);
    }
    
    protected virtual void OnNextToCube(CubeInteractionData data, Rollable rollable) {
    }
    
    public virtual void SignalRollBegin(RollEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollBegin,data));
    }
    
    public virtual void SignalRollComplete(RollEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollComplete,data));
    }
    
    public virtual void SignalReset(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.Reset,data));
    }
    
    public virtual void SignalMoveTo(MoveCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.MoveTo,data));
    }
    
    public virtual void SignalSplitCube(SplitCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.SplitCube,data));
    }
    
    public virtual void SignalCubeMoved(MoveCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.CubeMoved,data));
    }
    
    public static void SignalRollBegin(IGame game, RollEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollBegin,data));
    }
    
    public static void SignalRollComplete(IGame game, RollEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollComplete,data));
    }
    
    public static void SignalReset(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.Reset,data));
    }
    
    public static void SignalMoveTo(IGame game, MoveCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.MoveTo,data));
    }
    
    public static void SignalSplitCube(IGame game, SplitCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.SplitCube,data));
    }
    
    public static void SignalCubeMoved(IGame game, MoveCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.CubeMoved,data));
    }
}

public enum CubeSystemEvents {
    
    RollBegin,
    
    RollComplete,
    
    Reset,
    
    MoveTo,
    
    SplitCube,
    
    CubeMoved,
}

public class CubeInputSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<MoveDirectionOnEnter> _MoveDirectionOnEnterManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<MoveDirectionOnEnter> MoveDirectionOnEnterManager {
        get {
            return _MoveDirectionOnEnterManager;
        }
        set {
            _MoveDirectionOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        MoveDirectionOnEnterManager = game.ComponentSystem.RegisterComponent<MoveDirectionOnEnter>();
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
        game.EventManager.ListenFor( UnityEvents.MouseDown, MouseDown );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
        HandleSelection(e);
    }
    
    protected virtual void MouseDown(Invert.ECS.IEvent e) {
        HandleMouseDown(e);
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        TriggerMoveDirectionOnEnter(e);
    }
    
    protected virtual void HandleSelection(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.HandleSelection(eventData, cube);
    }
    
    protected virtual void HandleSelection(EntityEventData data, Cube cube) {
    }
    
    protected virtual void HandleMouseDown(Invert.ECS.IEvent e) {
        var eventData = (MouseEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.HandleMouseDown(eventData, cube);
    }
    
    protected virtual void HandleMouseDown(MouseEventData data, Cube cube) {
    }
    
    protected virtual void TriggerMoveDirectionOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        MoveDirectionOnEnter movedirectiononenter;
        if (!Game.ComponentSystem.TryGetComponent<MoveDirectionOnEnter>(eventData.PlateId, out movedirectiononenter)) {
            return;
        }
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(movedirectiononenter.RollableId, out rollable)) {
            return;
        }
        this.TriggerMoveDirectionOnEnter(eventData, cube, movedirectiononenter, rollable);
    }
    
    protected virtual void TriggerMoveDirectionOnEnter(PlateCubeCollsion data, Cube cube, MoveDirectionOnEnter movedirectiononenter, Rollable rollable) {
    }
    
    public virtual void SignalSelected(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.Selected,data));
    }
    
    public virtual void SignalL(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.L,data));
    }
    
    public virtual void SignalF(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.F,data));
    }
    
    public virtual void SignalR(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.R,data));
    }
    
    public virtual void SignalB(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.B,data));
    }
    
    public static void SignalSelected(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.Selected,data));
    }
    
    public static void SignalL(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.L,data));
    }
    
    public static void SignalF(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.F,data));
    }
    
    public static void SignalR(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.R,data));
    }
    
    public static void SignalB(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.B,data));
    }
}

public enum CubeInputSystemEvents {
    
    Selected,
    
    L,
    
    F,
    
    R,
    
    B,
}

public class CubeGravitySystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
        RollCompleted(e);
    }
    
    protected virtual void RollCompleted(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(cube.EntityId, out rollable)) {
            return;
        }
        this.RollCompleted(eventData, cube, rollable);
    }
    
    protected virtual void RollCompleted(RollEventData data, Cube cube, Rollable rollable) {
    }
    
    public virtual void SignalOnFall(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.OnFall,data));
    }
    
    public virtual void SignalRollCompletedStandingUp(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RollCompletedStandingUp,data));
    }
    
    public virtual void SignalRolledNextToCube(CubeInteractionData data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RolledNextToCube,data));
    }
    
    public static void SignalOnFall(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.OnFall,data));
    }
    
    public static void SignalRollCompletedStandingUp(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RollCompletedStandingUp,data));
    }
    
    public static void SignalRolledNextToCube(IGame game, CubeInteractionData data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RolledNextToCube,data));
    }
}

public enum CubeGravitySystemEvents {
    
    OnFall,
    
    RollCompletedStandingUp,
    
    RolledNextToCube,
}

public class FlipCubeGameSystemBase : UnitySystem {
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( LevelSystemEvents.EnterLevel, EnterLevel );
        game.EventManager.ListenFor( ZoneSystemEvents.EnterZone, EnterZone );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.LevelComplete, LevelComplete );
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
        OnRestart(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
        OnFail(e);
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
        GameOver(e);
    }
    
    protected virtual void EnterLevel(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnterZone(Invert.ECS.IEvent e) {
        OnEnterZone(e);
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnEnteredZone(e);
    }
    
    protected virtual void LevelComplete(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnRestart(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnRestart(eventData);
    }
    
    protected virtual void OnRestart(LevelEventData data) {
    }
    
    protected virtual void OnFail(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnFail(eventData);
    }
    
    protected virtual void OnFail(EntityEventData data) {
    }
    
    protected virtual void GameOver(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        this.GameOver(eventData);
    }
    
    protected virtual void GameOver(PlateCubeCollsion data) {
    }
    
    protected virtual void OnEnterZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        Zone zone;
        if (!Game.ComponentSystem.TryGetComponent<Zone>(eventData.ZoneId, out zone)) {
            return;
        }
        this.OnEnterZone(eventData, zone);
    }
    
    protected virtual void OnEnterZone(ZoneEventData data, Zone zone) {
    }
    
    protected virtual void OnEnteredZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnEnteredZone(eventData);
    }
    
    protected virtual void OnEnteredZone(ZoneEventData data) {
    }
    
    public virtual void SignalGameOver(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeGameSystemEvents.GameOver,data));
    }
    
    public static void SignalGameOver(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeGameSystemEvents.GameOver,data));
    }
}

public enum FlipCubeGameSystemEvents {
    
    GameOver,
}

public class FlipCubeNotificationsBase : UnitySystem {
    
    private ComponentManager<NotifyOnEnter> _NotifyOnEnterManager;
    
    public ComponentManager<NotifyOnEnter> NotifyOnEnterManager {
        get {
            return _NotifyOnEnterManager;
        }
        set {
            _NotifyOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        NotifyOnEnterManager = game.ComponentSystem.RegisterComponent<NotifyOnEnter>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        Notify(e);
    }
    
    protected virtual void Notify(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        NotifyOnEnter notifyonenter;
        if (!Game.ComponentSystem.TryGetComponent<NotifyOnEnter>(eventData.PlateId, out notifyonenter)) {
            return;
        }
        this.Notify(eventData, notifyonenter);
        NotificationData displayData = new NotificationData();
        displayData.Message = notifyonenter.Message;
        NotificationSystem.SignalDisplay(this.Game, displayData);
    }
    
    protected virtual void Notify(PlateCubeCollsion data, NotifyOnEnter notifyonenter) {
    }
}

public enum FlipCubeNotificationsEvents {
}

public class FlipCubeSystemBase : UnitySystem {
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    private ComponentManager<EnterLevelOnEnter> _EnterLevelOnEnterManager;
    
    private ComponentManager<LevelScene> _LevelSceneManager;
    
    private ComponentManager<ZoneScene> _ZoneSceneManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public ComponentManager<EnterLevelOnEnter> EnterLevelOnEnterManager {
        get {
            return _EnterLevelOnEnterManager;
        }
        set {
            _EnterLevelOnEnterManager = value;
        }
    }
    
    public ComponentManager<LevelScene> LevelSceneManager {
        get {
            return _LevelSceneManager;
        }
        set {
            _LevelSceneManager = value;
        }
    }
    
    public ComponentManager<ZoneScene> ZoneSceneManager {
        get {
            return _ZoneSceneManager;
        }
        set {
            _ZoneSceneManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        EnterLevelOnEnterManager = game.ComponentSystem.RegisterComponent<EnterLevelOnEnter>();
        LevelSceneManager = game.ComponentSystem.RegisterComponent<LevelScene>();
        ZoneSceneManager = game.ComponentSystem.RegisterComponent<ZoneScene>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        game.EventManager.ListenFor( ZoneSystemEvents.EnterZone, EnterZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnterLevel, EnterLevel );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEnteredStandingUp, CubeEnteredStandingUp );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( FlipCubeSystemEvents.NextLevel, NextLevel );
        game.EventManager.ListenFor( FlipCubeSystemEvents.BackToZone, BackToZone );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
    }
    
    protected virtual void EnterZone(Invert.ECS.IEvent e) {
        HandleEnterZone(e);
    }
    
    protected virtual void EnterLevel(Invert.ECS.IEvent e) {
        HandleEnterLevel(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
    }
    
    protected virtual void CubeEnteredStandingUp(Invert.ECS.IEvent e) {
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        HandleEnterLevelOnEnter(e);
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
    }
    
    protected virtual void NextLevel(Invert.ECS.IEvent e) {
        HandleNextLevel(e);
    }
    
    protected virtual void BackToZone(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnEnteredZone(e);
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnEnteredLevel(e);
    }
    
    protected virtual void HandleEnterZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.HandleEnterZone(eventData);
    }
    
    protected virtual void HandleEnterZone(ZoneEventData data) {
    }
    
    protected virtual void HandleEnterLevel(Invert.ECS.IEvent e) {
        var eventData = (EnterLevelEventData)e.Data;
        this.HandleEnterLevel(eventData);
    }
    
    protected virtual void HandleEnterLevel(EnterLevelEventData data) {
    }
    
    protected virtual void HandleEnterLevelOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        EnterLevelOnEnter enterlevelonenter;
        if (!Game.ComponentSystem.TryGetComponent<EnterLevelOnEnter>(eventData.PlateId, out enterlevelonenter)) {
            return;
        }
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(enterlevelonenter.LevelId, out level)) {
            return;
        }
        this.HandleEnterLevelOnEnter(eventData, enterlevelonenter, level);
    }
    
    protected virtual void HandleEnterLevelOnEnter(PlateCubeCollsion data, EnterLevelOnEnter enterlevelonenter, Level level) {
    }
    
    protected virtual void HandleNextLevel(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.HandleNextLevel(eventData);
    }
    
    protected virtual void HandleNextLevel(EntityEventData data) {
    }
    
    protected virtual void OnEnteredZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnEnteredZone(eventData);
    }
    
    protected virtual void OnEnteredZone(ZoneEventData data) {
    }
    
    protected virtual void OnEnteredLevel(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnEnteredLevel(eventData);
    }
    
    protected virtual void OnEnteredLevel(LevelEventData data) {
    }
    
    public virtual void SignalGameReady(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameReady,data));
    }
    
    public virtual void SignalResetGame(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.ResetGame,data));
    }
    
    public virtual void SignalNextLevel(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.NextLevel,data));
    }
    
    public virtual void SignalBackToZone(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.BackToZone,data));
    }
    
    public virtual void SignalGameDataReady(GameReadyData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameDataReady,data));
    }
    
    public static void SignalGameReady(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameReady,data));
    }
    
    public static void SignalResetGame(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.ResetGame,data));
    }
    
    public static void SignalNextLevel(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.NextLevel,data));
    }
    
    public static void SignalBackToZone(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.BackToZone,data));
    }
    
    public static void SignalGameDataReady(IGame game, GameReadyData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameDataReady,data));
    }
}

public enum FlipCubeSystemEvents {
    
    GameReady,
    
    ResetGame,
    
    NextLevel,
    
    BackToZone,
    
    GameDataReady,
}

public class BasicGameSystemBase : UnitySystem {
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    private ComponentManager<LevelSpawnPoint> _LevelSpawnPointManager;
    
    private ComponentManager<CubeSpawnPoint> _CubeSpawnPointManager;
    
    private ComponentManager<BasicGame> _BasicGameManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public ComponentManager<LevelSpawnPoint> LevelSpawnPointManager {
        get {
            return _LevelSpawnPointManager;
        }
        set {
            _LevelSpawnPointManager = value;
        }
    }
    
    public ComponentManager<CubeSpawnPoint> CubeSpawnPointManager {
        get {
            return _CubeSpawnPointManager;
        }
        set {
            _CubeSpawnPointManager = value;
        }
    }
    
    public ComponentManager<BasicGame> BasicGameManager {
        get {
            return _BasicGameManager;
        }
        set {
            _BasicGameManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        LevelSpawnPointManager = game.ComponentSystem.RegisterComponent<LevelSpawnPoint>();
        CubeSpawnPointManager = game.ComponentSystem.RegisterComponent<CubeSpawnPoint>();
        BasicGameManager = game.ComponentSystem.RegisterComponent<BasicGame>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameReady, GameReady );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEnteredStandingUp, CubeEnteredStandingUp );
        game.EventManager.ListenFor( LevelSystemEvents.LevelComplete, LevelComplete );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( CubeSystemEvents.RollBegin, RollBegin );
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GameReady(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnEnteredLevel(e);
    }
    
    protected virtual void CubeEnteredStandingUp(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelComplete(Invert.ECS.IEvent e) {
        OnLevelComplete(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void RollBegin(Invert.ECS.IEvent e) {
        OnRoll(e);
    }
    
    protected virtual void OnEnteredLevel(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(eventData.LevelId, out level)) {
            return;
        }
        this.OnEnteredLevel(eventData, level);
    }
    
    protected virtual void OnEnteredLevel(LevelEventData data, Level level) {
    }
    
    protected virtual void OnLevelComplete(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(eventData.LevelId, out level)) {
            return;
        }
        this.OnLevelComplete(eventData, level);
    }
    
    protected virtual void OnLevelComplete(LevelEventData data, Level level) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    protected virtual void OnRoll(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.EntityId, out player)) {
            return;
        }
        this.OnRoll(eventData, player);
    }
    
    protected virtual void OnRoll(RollEventData data, Player player) {
    }
}

public enum BasicGameSystemEvents {
}
