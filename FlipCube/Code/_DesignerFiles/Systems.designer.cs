// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class CubeSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        game.EventManager.ListenFor( CubeInputSystemEvents.L, L );
        game.EventManager.ListenFor( CubeInputSystemEvents.F, F );
        game.EventManager.ListenFor( CubeInputSystemEvents.B, B );
        game.EventManager.ListenFor( CubeInputSystemEvents.R, R );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( CubeSystemEvents.MoveTo, MoveTo );
        game.EventManager.ListenFor( CubeSystemEvents.SplitCube, SplitCube );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RolledNextToCube, RolledNextToCube );
    }
    
    protected virtual void L(Invert.ECS.IEvent e) {
        OnLeft(e);
    }
    
    protected virtual void F(Invert.ECS.IEvent e) {
        OnForward(e);
    }
    
    protected virtual void B(Invert.ECS.IEvent e) {
        OnBackwards(e);
    }
    
    protected virtual void R(Invert.ECS.IEvent e) {
        OnRight(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void MoveTo(Invert.ECS.IEvent e) {
        MoveCube(e);
    }
    
    protected virtual void SplitCube(Invert.ECS.IEvent e) {
        OnSplit(e);
    }
    
    protected virtual void RolledNextToCube(Invert.ECS.IEvent e) {
        OnNextToCube(e);
    }
    
    protected virtual void OnLeft(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnLeft(eventData, rollable);
    }
    
    protected virtual void OnLeft(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnForward(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnForward(eventData, rollable);
    }
    
    protected virtual void OnForward(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnBackwards(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnBackwards(eventData, rollable);
    }
    
    protected virtual void OnBackwards(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnRight(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnRight(eventData, rollable);
    }
    
    protected virtual void OnRight(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.EntityId, out rollable)) {
            return;
        }
        this.OnReset(eventData, rollable);
    }
    
    protected virtual void OnReset(EntityEventData data, Rollable rollable) {
    }
    
    protected virtual void MoveCube(Invert.ECS.IEvent e) {
        var eventData = (MoveCubeData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeId, out rollable)) {
            return;
        }
        this.MoveCube(eventData, rollable);
    }
    
    protected virtual void MoveCube(MoveCubeData data, Rollable rollable) {
    }
    
    protected virtual void OnSplit(Invert.ECS.IEvent e) {
        var eventData = (SplitCubeData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeId, out rollable)) {
            return;
        }
        this.OnSplit(eventData, rollable);
    }
    
    protected virtual void OnSplit(SplitCubeData data, Rollable rollable) {
    }
    
    protected virtual void OnNextToCube(Invert.ECS.IEvent e) {
        var eventData = (CubeInteractionData)e.Data;
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(eventData.CubeA, out rollable)) {
            return;
        }
        this.OnNextToCube(eventData, rollable);
    }
    
    protected virtual void OnNextToCube(CubeInteractionData data, Rollable rollable) {
    }
    
    public virtual void SignalRollBegin(RollEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollBegin,data));
    }
    
    public virtual void SignalRollComplete(RollEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollComplete,data));
    }
    
    public virtual void SignalReset(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.Reset,data));
    }
    
    public virtual void SignalMoveTo(MoveCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.MoveTo,data));
    }
    
    public virtual void SignalSplitCube(SplitCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.SplitCube,data));
    }
    
    public virtual void SignalCubeMoved(MoveCubeData data) {
        Game.EventManager.SignalEvent(new EventData(CubeSystemEvents.CubeMoved,data));
    }
    
    public static void SignalRollBegin(IGame game, RollEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollBegin,data));
    }
    
    public static void SignalRollComplete(IGame game, RollEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.RollComplete,data));
    }
    
    public static void SignalReset(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.Reset,data));
    }
    
    public static void SignalMoveTo(IGame game, MoveCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.MoveTo,data));
    }
    
    public static void SignalSplitCube(IGame game, SplitCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.SplitCube,data));
    }
    
    public static void SignalCubeMoved(IGame game, MoveCubeData data) {
        game.EventManager.SignalEvent(new EventData(CubeSystemEvents.CubeMoved,data));
    }
}

public class CubeInputSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<MoveDirectionOnEnter> _MoveDirectionOnEnterManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<MoveDirectionOnEnter> MoveDirectionOnEnterManager {
        get {
            return _MoveDirectionOnEnterManager;
        }
        set {
            _MoveDirectionOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        MoveDirectionOnEnterManager = game.ComponentSystem.RegisterComponent<MoveDirectionOnEnter>();
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
        game.EventManager.ListenFor( UnityEvents.MouseDown, MouseDown );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
        HandleSelection(e);
    }
    
    protected virtual void MouseDown(Invert.ECS.IEvent e) {
        HandleMouseDown(e);
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        TriggerMoveDirectionOnEnter(e);
    }
    
    protected virtual void HandleSelection(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.HandleSelection(eventData, cube);
    }
    
    protected virtual void HandleSelection(EntityEventData data, Cube cube) {
    }
    
    protected virtual void HandleMouseDown(Invert.ECS.IEvent e) {
        var eventData = (MouseEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.HandleMouseDown(eventData, cube);
    }
    
    protected virtual void HandleMouseDown(MouseEventData data, Cube cube) {
    }
    
    protected virtual void TriggerMoveDirectionOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        MoveDirectionOnEnter movedirectiononenter;
        if (!Game.ComponentSystem.TryGetComponent<MoveDirectionOnEnter>(eventData.PlateId, out movedirectiononenter)) {
            return;
        }
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(movedirectiononenter.RollableId, out rollable)) {
            return;
        }
        this.TriggerMoveDirectionOnEnter(eventData, cube, movedirectiononenter, rollable);
    }
    
    protected virtual void TriggerMoveDirectionOnEnter(PlateCubeCollsion data, Cube cube, MoveDirectionOnEnter movedirectiononenter, Rollable rollable) {
    }
    
    public virtual void SignalSelected(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.Selected,data));
    }
    
    public virtual void SignalL(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.L,data));
    }
    
    public virtual void SignalF(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.F,data));
    }
    
    public virtual void SignalR(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.R,data));
    }
    
    public virtual void SignalB(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.B,data));
    }
    
    public static void SignalSelected(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.Selected,data));
    }
    
    public static void SignalL(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.L,data));
    }
    
    public static void SignalF(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.F,data));
    }
    
    public static void SignalR(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.R,data));
    }
    
    public static void SignalB(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeInputSystemEvents.B,data));
    }
}

public class CubeGravitySystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
        RollCompleted(e);
    }
    
    protected virtual void RollCompleted(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(cube.EntityId, out rollable)) {
            return;
        }
        this.RollCompleted(eventData, cube, rollable);
    }
    
    protected virtual void RollCompleted(RollEventData data, Cube cube, Rollable rollable) {
    }
    
    public virtual void SignalOnFall(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.OnFall,data));
    }
    
    public virtual void SignalRollCompletedStandingUp(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RollCompletedStandingUp,data));
    }
    
    public virtual void SignalRolledNextToCube(CubeInteractionData data) {
        Game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RolledNextToCube,data));
    }
    
    public static void SignalOnFall(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.OnFall,data));
    }
    
    public static void SignalRollCompletedStandingUp(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RollCompletedStandingUp,data));
    }
    
    public static void SignalRolledNextToCube(IGame game, CubeInteractionData data) {
        game.EventManager.SignalEvent(new EventData(CubeGravitySystemEvents.RolledNextToCube,data));
    }
}

public class CameraSystemBase : UnitySystem {
    
    private ComponentManager<FollowOnSelection> _FollowOnSelectionManager;
    
    public ComponentManager<FollowOnSelection> FollowOnSelectionManager {
        get {
            return _FollowOnSelectionManager;
        }
        set {
            _FollowOnSelectionManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        FollowOnSelectionManager = game.ComponentSystem.RegisterComponent<FollowOnSelection>();
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
        OnSelection(e);
    }
    
    protected virtual void OnSelection(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        FollowOnSelection followonselection;
        if (!Game.ComponentSystem.TryGetComponent<FollowOnSelection>(eventData.EntityId, out followonselection)) {
            return;
        }
        this.OnSelection(eventData, followonselection);
    }
    
    protected virtual void OnSelection(EntityEventData data, FollowOnSelection followonselection) {
    }
}

public class PlateSystemBase : UnitySystem {
    
    private ComponentManager<Rollable> _RollableManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<YingYangPlate> _YingYangPlateManager;
    
    private ComponentManager<DisableColliderOnCollision> _DisableColliderOnCollisionManager;
    
    public ComponentManager<Rollable> RollableManager {
        get {
            return _RollableManager;
        }
        set {
            _RollableManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<YingYangPlate> YingYangPlateManager {
        get {
            return _YingYangPlateManager;
        }
        set {
            _YingYangPlateManager = value;
        }
    }
    
    public ComponentManager<DisableColliderOnCollision> DisableColliderOnCollisionManager {
        get {
            return _DisableColliderOnCollisionManager;
        }
        set {
            _DisableColliderOnCollisionManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        RollableManager = game.ComponentSystem.RegisterComponent<Rollable>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        YingYangPlateManager = game.ComponentSystem.RegisterComponent<YingYangPlate>();
        DisableColliderOnCollisionManager = game.ComponentSystem.RegisterComponent<DisableColliderOnCollision>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( UnityEvents.CollisionEnter, CollisionEnter );
        game.EventManager.ListenFor( UnityEvents.CollisionExit, CollisionExit );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        DisableColliderCollsion(e);
        SplitCube(e);
    }
    
    protected virtual void CollisionEnter(Invert.ECS.IEvent e) {
        PlateEnter(e);
    }
    
    protected virtual void CollisionExit(Invert.ECS.IEvent e) {
        PlateExit(e);
    }
    
    protected virtual void DisableColliderCollsion(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        DisableColliderOnCollision disablecollideroncollision;
        if (!Game.ComponentSystem.TryGetComponent<DisableColliderOnCollision>(eventData.PlateId, out disablecollideroncollision)) {
            return;
        }
        this.DisableColliderCollsion(eventData, disablecollideroncollision);
    }
    
    protected virtual void DisableColliderCollsion(PlateCubeCollsion data, DisableColliderOnCollision disablecollideroncollision) {
    }
    
    protected virtual void SplitCube(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        YingYangPlate yingyangplate;
        if (!Game.ComponentSystem.TryGetComponent<YingYangPlate>(eventData.PlateId, out yingyangplate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        Plate[] plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(yingyangplate.TargetPlates, out plate)) {
            return;
        }
        this.SplitCube(eventData, yingyangplate, cube, plate);
    }
    
    protected virtual void SplitCube(PlateCubeCollsion data, YingYangPlate yingyangplate, Cube cube, Plate[] plate) {
    }
    
    protected virtual void PlateEnter(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.ColliderId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CollideeId, out cube)) {
            return;
        }
        this.PlateEnter(eventData, plate, cube);
        PlateCubeCollsion cubeenteredData = new PlateCubeCollsion();
        cubeenteredData.CubeId = cube.EntityId;
        cubeenteredData.PlateId = plate.EntityId;
        PlateSystem.SignalCubeEntered(this.Game, cubeenteredData);
        Rollable rollable;
        if (!Game.ComponentSystem.TryGetComponent<Rollable>(plate.EntityId, out rollable)) {
            return;
        }
        this.IsRollable(rollable, plate, cube);
        if (rollable.RestState == RollerState.StandingUp) {
            PlateCubeCollsion rollcompletedstandingupData = new PlateCubeCollsion();
            rollcompletedstandingupData.CubeId = cube.EntityId;
            rollcompletedstandingupData.PlateId = plate.EntityId;
            CubeGravitySystem.SignalRollCompletedStandingUp(this.Game, rollcompletedstandingupData);
        }
    }
    
    protected virtual void PlateEnter(CollisionEventData data, Plate plate, Cube cube) {
    }
    
    protected virtual void IsRollable(Rollable rollable, Plate plate, Cube cube) {
    }
    
    protected virtual void PlateExit(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.CollideeId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.ColliderId, out cube)) {
            return;
        }
        this.PlateExit(eventData, plate, cube);
        PlateCubeCollsion cubeleftData = new PlateCubeCollsion();
        cubeleftData.CubeId = cube.EntityId;
        cubeleftData.PlateId = plate.EntityId;
        PlateSystem.SignalCubeLeft(this.Game, cubeleftData);
    }
    
    protected virtual void PlateExit(CollisionEventData data, Plate plate, Cube cube) {
    }
    
    public virtual void SignalCubeEntered(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEntered,data));
    }
    
    public virtual void SignalCubeLeft(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeLeft,data));
    }
    
    public virtual void SignalGoalPlateHit(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.GoalPlateHit,data));
    }
    
    public virtual void SignalSwitchPlateHit(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.SwitchPlateHit,data));
    }
    
    public virtual void SignalCubeEnteredStandingUp(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEnteredStandingUp,data));
    }
    
    public static void SignalCubeEntered(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEntered,data));
    }
    
    public static void SignalCubeLeft(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeLeft,data));
    }
    
    public static void SignalGoalPlateHit(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.GoalPlateHit,data));
    }
    
    public static void SignalSwitchPlateHit(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.SwitchPlateHit,data));
    }
    
    public static void SignalCubeEnteredStandingUp(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(PlateSystemEvents.CubeEnteredStandingUp,data));
    }
}

public class TeliporterSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Teliporter> _TeliporterManager;
    
    private ComponentManager<Teliportable> _TeliportableManager;
    
    private ComponentManager<TeliporterTarget> _TeliporterTargetManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Teliporter> TeliporterManager {
        get {
            return _TeliporterManager;
        }
        set {
            _TeliporterManager = value;
        }
    }
    
    public ComponentManager<Teliportable> TeliportableManager {
        get {
            return _TeliportableManager;
        }
        set {
            _TeliportableManager = value;
        }
    }
    
    public ComponentManager<TeliporterTarget> TeliporterTargetManager {
        get {
            return _TeliporterTargetManager;
        }
        set {
            _TeliporterTargetManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        TeliporterManager = game.ComponentSystem.RegisterComponent<Teliporter>();
        TeliportableManager = game.ComponentSystem.RegisterComponent<Teliportable>();
        TeliporterTargetManager = game.ComponentSystem.RegisterComponent<TeliporterTarget>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        HandleCollision(e);
    }
    
    protected virtual void HandleCollision(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        Teliporter teliporter;
        if (!Game.ComponentSystem.TryGetComponent<Teliporter>(eventData.PlateId, out teliporter)) {
            return;
        }
        this.HandleCollision(eventData, cube, teliporter);
        EntityEventData teliportingData = new EntityEventData();
        teliportingData.EntityId = cube.EntityId;
        TeliporterSystem.SignalTeliporting(this.Game, teliportingData);
    }
    
    protected virtual void HandleCollision(PlateCubeCollsion data, Cube cube, Teliporter teliporter) {
    }
    
    public virtual void SignalTeliporting(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(TeliporterSystemEvents.Teliporting,data));
    }
    
    public static void SignalTeliporting(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(TeliporterSystemEvents.Teliporting,data));
    }
}

public class SwitchPlateSystemBase : UnitySystem {
    
    private ComponentManager<SwitchPlateTrigger> _SwitchPlateTriggerManager;
    
    private ComponentManager<SwitchPlateTarget> _SwitchPlateTargetManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<SwitchOnWithXp> _SwitchOnWithXpManager;
    
    public ComponentManager<SwitchPlateTrigger> SwitchPlateTriggerManager {
        get {
            return _SwitchPlateTriggerManager;
        }
        set {
            _SwitchPlateTriggerManager = value;
        }
    }
    
    public ComponentManager<SwitchPlateTarget> SwitchPlateTargetManager {
        get {
            return _SwitchPlateTargetManager;
        }
        set {
            _SwitchPlateTargetManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<SwitchOnWithXp> SwitchOnWithXpManager {
        get {
            return _SwitchOnWithXpManager;
        }
        set {
            _SwitchOnWithXpManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        SwitchPlateTriggerManager = game.ComponentSystem.RegisterComponent<SwitchPlateTrigger>();
        SwitchPlateTargetManager = game.ComponentSystem.RegisterComponent<SwitchPlateTarget>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        SwitchOnWithXpManager = game.ComponentSystem.RegisterComponent<SwitchOnWithXp>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerLoaded, PlayerLoaded );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        ActivateSwitchPlate(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlayerLoaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ActivateSwitchPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        SwitchPlateTrigger switchplatetrigger;
        if (!Game.ComponentSystem.TryGetComponent<SwitchPlateTrigger>(eventData.PlateId, out switchplatetrigger)) {
            return;
        }
        this.ActivateSwitchPlate(eventData, switchplatetrigger);
    }
    
    protected virtual void ActivateSwitchPlate(PlateCubeCollsion data, SwitchPlateTrigger switchplatetrigger) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    public virtual void SignalPlateActivatedOn(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOn,data));
    }
    
    public virtual void SignalPlateActivatedOff(PlateCubeCollsion data) {
        Game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOff,data));
    }
    
    public static void SignalPlateActivatedOn(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOn,data));
    }
    
    public static void SignalPlateActivatedOff(IGame game, PlateCubeCollsion data) {
        game.EventManager.SignalEvent(new EventData(SwitchPlateSystemEvents.PlateActivatedOff,data));
    }
}

public class ShiftingPlateBase : UnitySystem {
    
    private ComponentManager<MoveLeftOnLeave> _MoveLeftOnLeaveManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<TransporterPlate> _TransporterPlateManager;
    
    public ComponentManager<MoveLeftOnLeave> MoveLeftOnLeaveManager {
        get {
            return _MoveLeftOnLeaveManager;
        }
        set {
            _MoveLeftOnLeaveManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<TransporterPlate> TransporterPlateManager {
        get {
            return _TransporterPlateManager;
        }
        set {
            _TransporterPlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        MoveLeftOnLeaveManager = game.ComponentSystem.RegisterComponent<MoveLeftOnLeave>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        TransporterPlateManager = game.ComponentSystem.RegisterComponent<TransporterPlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeave(e);
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        OnRollCompleted(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void OnCubeLeave(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        MoveLeftOnLeave moveleftonleave;
        if (!Game.ComponentSystem.TryGetComponent<MoveLeftOnLeave>(eventData.PlateId, out moveleftonleave)) {
            return;
        }
        this.OnCubeLeave(eventData, moveleftonleave);
    }
    
    protected virtual void OnCubeLeave(PlateCubeCollsion data, MoveLeftOnLeave moveleftonleave) {
    }
    
    protected virtual void OnRollCompleted(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        TransporterPlate transporterplate;
        if (!Game.ComponentSystem.TryGetComponent<TransporterPlate>(eventData.PlateId, out transporterplate)) {
            return;
        }
        this.OnRollCompleted(eventData, cube, transporterplate);
    }
    
    protected virtual void OnRollCompleted(PlateCubeCollsion data, Cube cube, TransporterPlate transporterplate) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
}

public class GoalPlateSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    private ComponentManager<TurnGravityOnEnter> _TurnGravityOnEnterManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public ComponentManager<TurnGravityOnEnter> TurnGravityOnEnterManager {
        get {
            return _TurnGravityOnEnterManager;
        }
        set {
            _TurnGravityOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        TurnGravityOnEnterManager = game.ComponentSystem.RegisterComponent<TurnGravityOnEnter>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        OnGoalPlate(e);
        GravityOnEnter(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnGoalPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(plate.EntityId, out goalplate)) {
            return;
        }
        this.OnGoalPlate(eventData, plate, cube, goalplate);
        PlateCubeCollsion goalplatehitData = new PlateCubeCollsion();
        goalplatehitData.CubeId = cube.EntityId;
        goalplatehitData.PlateId = plate.EntityId;
        PlateSystem.SignalGoalPlateHit(this.Game, goalplatehitData);
    }
    
    protected virtual void OnGoalPlate(PlateCubeCollsion data, Plate plate, Cube cube, GoalPlate goalplate) {
    }
    
    protected virtual void GravityOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TurnGravityOnEnter turngravityonenter;
        if (!Game.ComponentSystem.TryGetComponent<TurnGravityOnEnter>(eventData.PlateId, out turngravityonenter)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CubeId, out cube)) {
            return;
        }
        this.GravityOnEnter(eventData, turngravityonenter, cube);
    }
    
    protected virtual void GravityOnEnter(PlateCubeCollsion data, TurnGravityOnEnter turngravityonenter, Cube cube) {
    }
}

public class DissolvePlateSystemBase : UnitySystem {
    
    private ComponentManager<DissolvePlate> _DissolvePlateManager;
    
    public ComponentManager<DissolvePlate> DissolvePlateManager {
        get {
            return _DissolvePlateManager;
        }
        set {
            _DissolvePlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        DissolvePlateManager = game.ComponentSystem.RegisterComponent<DissolvePlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnDissolve(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void OnDissolve(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        DissolvePlate dissolveplate;
        if (!Game.ComponentSystem.TryGetComponent<DissolvePlate>(eventData.PlateId, out dissolveplate)) {
            return;
        }
        this.OnDissolve(eventData, dissolveplate);
    }
    
    protected virtual void OnDissolve(PlateCubeCollsion data, DissolvePlate dissolveplate) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
}

public class LevelSystemBase : UnitySystem {
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<LevelScene> _LevelSceneManager;
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<LevelScene> LevelSceneManager {
        get {
            return _LevelSceneManager;
        }
        set {
            _LevelSceneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        LevelSceneManager = game.ComponentSystem.RegisterComponent<LevelScene>();
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    public virtual void SignalLevelComplete(LevelEventData data) {
        Game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelComplete,data));
    }
    
    public virtual void SignalLevelQuit(LevelEventData data) {
        Game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelQuit,data));
    }
    
    public virtual void SignalLevelRestart(LevelEventData data) {
        Game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelRestart,data));
    }
    
    public virtual void SignalEnterLevel(EnterLevelEventData data) {
        Game.EventManager.SignalEvent(new EventData(LevelSystemEvents.EnterLevel,data));
    }
    
    public virtual void SignalEnteredLevel(LevelEventData data) {
        Game.EventManager.SignalEvent(new EventData(LevelSystemEvents.EnteredLevel,data));
    }
    
    public static void SignalLevelComplete(IGame game, LevelEventData data) {
        game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelComplete,data));
    }
    
    public static void SignalLevelQuit(IGame game, LevelEventData data) {
        game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelQuit,data));
    }
    
    public static void SignalLevelRestart(IGame game, LevelEventData data) {
        game.EventManager.SignalEvent(new EventData(LevelSystemEvents.LevelRestart,data));
    }
    
    public static void SignalEnterLevel(IGame game, EnterLevelEventData data) {
        game.EventManager.SignalEvent(new EventData(LevelSystemEvents.EnterLevel,data));
    }
    
    public static void SignalEnteredLevel(IGame game, LevelEventData data) {
        game.EventManager.SignalEvent(new EventData(LevelSystemEvents.EnteredLevel,data));
    }
}

public class FlipCubeGameSystemBase : UnitySystem {
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( LevelSystemEvents.EnterLevel, EnterLevel );
        game.EventManager.ListenFor( ZoneSystemEvents.EnterZone, EnterZone );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.LevelComplete, LevelComplete );
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
        OnRestart(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
        OnFail(e);
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
        GameOver(e);
    }
    
    protected virtual void EnterLevel(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnterZone(Invert.ECS.IEvent e) {
        OnEnterZone(e);
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnEnteredZone(e);
    }
    
    protected virtual void LevelComplete(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnRestart(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnRestart(eventData);
    }
    
    protected virtual void OnRestart(LevelEventData data) {
    }
    
    protected virtual void OnFail(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnFail(eventData);
    }
    
    protected virtual void OnFail(EntityEventData data) {
    }
    
    protected virtual void GameOver(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        this.GameOver(eventData);
    }
    
    protected virtual void GameOver(PlateCubeCollsion data) {
    }
    
    protected virtual void OnEnterZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        Zone zone;
        if (!Game.ComponentSystem.TryGetComponent<Zone>(eventData.ZoneId, out zone)) {
            return;
        }
        this.OnEnterZone(eventData, zone);
    }
    
    protected virtual void OnEnterZone(ZoneEventData data, Zone zone) {
    }
    
    protected virtual void OnEnteredZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnEnteredZone(eventData);
    }
    
    protected virtual void OnEnteredZone(ZoneEventData data) {
    }
    
    public virtual void SignalGameOver(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeGameSystemEvents.GameOver,data));
    }
    
    public static void SignalGameOver(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeGameSystemEvents.GameOver,data));
    }
}

public class FlipCubeNotificationsBase : UnitySystem {
    
    private ComponentManager<NotifyOnEnter> _NotifyOnEnterManager;
    
    public ComponentManager<NotifyOnEnter> NotifyOnEnterManager {
        get {
            return _NotifyOnEnterManager;
        }
        set {
            _NotifyOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        NotifyOnEnterManager = game.ComponentSystem.RegisterComponent<NotifyOnEnter>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        Notify(e);
    }
    
    protected virtual void Notify(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        NotifyOnEnter notifyonenter;
        if (!Game.ComponentSystem.TryGetComponent<NotifyOnEnter>(eventData.PlateId, out notifyonenter)) {
            return;
        }
        this.Notify(eventData, notifyonenter);
        NotificationData displayData = new NotificationData();
        displayData.Message = notifyonenter.Message;
        NotificationSystem.SignalDisplay(this.Game, displayData);
    }
    
    protected virtual void Notify(PlateCubeCollsion data, NotifyOnEnter notifyonenter) {
    }
}

public class FlipCubeSystemBase : UnitySystem {
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    private ComponentManager<EnterLevelOnEnter> _EnterLevelOnEnterManager;
    
    private ComponentManager<LevelScene> _LevelSceneManager;
    
    private ComponentManager<ZoneScene> _ZoneSceneManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public ComponentManager<EnterLevelOnEnter> EnterLevelOnEnterManager {
        get {
            return _EnterLevelOnEnterManager;
        }
        set {
            _EnterLevelOnEnterManager = value;
        }
    }
    
    public ComponentManager<LevelScene> LevelSceneManager {
        get {
            return _LevelSceneManager;
        }
        set {
            _LevelSceneManager = value;
        }
    }
    
    public ComponentManager<ZoneScene> ZoneSceneManager {
        get {
            return _ZoneSceneManager;
        }
        set {
            _ZoneSceneManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        EnterLevelOnEnterManager = game.ComponentSystem.RegisterComponent<EnterLevelOnEnter>();
        LevelSceneManager = game.ComponentSystem.RegisterComponent<LevelScene>();
        ZoneSceneManager = game.ComponentSystem.RegisterComponent<ZoneScene>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        game.EventManager.ListenFor( ZoneSystemEvents.EnterZone, EnterZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnterLevel, EnterLevel );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEnteredStandingUp, CubeEnteredStandingUp );
        game.EventManager.ListenFor( CubeGravitySystemEvents.RollCompletedStandingUp, RollCompletedStandingUp );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( FlipCubeSystemEvents.NextLevel, NextLevel );
        game.EventManager.ListenFor( FlipCubeSystemEvents.BackToZone, BackToZone );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
    }
    
    protected virtual void EnterZone(Invert.ECS.IEvent e) {
        HandleEnterZone(e);
    }
    
    protected virtual void EnterLevel(Invert.ECS.IEvent e) {
        HandleEnterLevel(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
    }
    
    protected virtual void CubeEnteredStandingUp(Invert.ECS.IEvent e) {
    }
    
    protected virtual void RollCompletedStandingUp(Invert.ECS.IEvent e) {
        HandleEnterLevelOnEnter(e);
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
    }
    
    protected virtual void NextLevel(Invert.ECS.IEvent e) {
        HandleNextLevel(e);
    }
    
    protected virtual void BackToZone(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnEnteredZone(e);
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnEnteredLevel(e);
    }
    
    protected virtual void HandleEnterZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.HandleEnterZone(eventData);
    }
    
    protected virtual void HandleEnterZone(ZoneEventData data) {
    }
    
    protected virtual void HandleEnterLevel(Invert.ECS.IEvent e) {
        var eventData = (EnterLevelEventData)e.Data;
        this.HandleEnterLevel(eventData);
    }
    
    protected virtual void HandleEnterLevel(EnterLevelEventData data) {
    }
    
    protected virtual void HandleEnterLevelOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        EnterLevelOnEnter enterlevelonenter;
        if (!Game.ComponentSystem.TryGetComponent<EnterLevelOnEnter>(eventData.PlateId, out enterlevelonenter)) {
            return;
        }
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(enterlevelonenter.LevelId, out level)) {
            return;
        }
        this.HandleEnterLevelOnEnter(eventData, enterlevelonenter, level);
    }
    
    protected virtual void HandleEnterLevelOnEnter(PlateCubeCollsion data, EnterLevelOnEnter enterlevelonenter, Level level) {
    }
    
    protected virtual void HandleNextLevel(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.HandleNextLevel(eventData);
    }
    
    protected virtual void HandleNextLevel(EntityEventData data) {
    }
    
    protected virtual void OnEnteredZone(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnEnteredZone(eventData);
    }
    
    protected virtual void OnEnteredZone(ZoneEventData data) {
    }
    
    protected virtual void OnEnteredLevel(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnEnteredLevel(eventData);
    }
    
    protected virtual void OnEnteredLevel(LevelEventData data) {
    }
    
    public virtual void SignalGameReady(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameReady,data));
    }
    
    public virtual void SignalResetGame(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.ResetGame,data));
    }
    
    public virtual void SignalNextLevel(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.NextLevel,data));
    }
    
    public virtual void SignalBackToZone(EntityEventData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.BackToZone,data));
    }
    
    public virtual void SignalGameDataReady(GameReadyData data) {
        Game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameDataReady,data));
    }
    
    public static void SignalGameReady(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameReady,data));
    }
    
    public static void SignalResetGame(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.ResetGame,data));
    }
    
    public static void SignalNextLevel(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.NextLevel,data));
    }
    
    public static void SignalBackToZone(IGame game, EntityEventData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.BackToZone,data));
    }
    
    public static void SignalGameDataReady(IGame game, GameReadyData data) {
        game.EventManager.SignalEvent(new EventData(FlipCubeSystemEvents.GameDataReady,data));
    }
}

public class BasicGameSystemBase : UnitySystem {
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    private ComponentManager<LevelSpawnPoint> _LevelSpawnPointManager;
    
    private ComponentManager<CubeSpawnPoint> _CubeSpawnPointManager;
    
    private ComponentManager<BasicGame> _BasicGameManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public ComponentManager<LevelSpawnPoint> LevelSpawnPointManager {
        get {
            return _LevelSpawnPointManager;
        }
        set {
            _LevelSpawnPointManager = value;
        }
    }
    
    public ComponentManager<CubeSpawnPoint> CubeSpawnPointManager {
        get {
            return _CubeSpawnPointManager;
        }
        set {
            _CubeSpawnPointManager = value;
        }
    }
    
    public ComponentManager<BasicGame> BasicGameManager {
        get {
            return _BasicGameManager;
        }
        set {
            _BasicGameManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        LevelSpawnPointManager = game.ComponentSystem.RegisterComponent<LevelSpawnPoint>();
        CubeSpawnPointManager = game.ComponentSystem.RegisterComponent<CubeSpawnPoint>();
        BasicGameManager = game.ComponentSystem.RegisterComponent<BasicGame>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameReady, GameReady );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
        game.EventManager.ListenFor( PlateSystemEvents.CubeEnteredStandingUp, CubeEnteredStandingUp );
        game.EventManager.ListenFor( LevelSystemEvents.LevelComplete, LevelComplete );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( CubeSystemEvents.RollBegin, RollBegin );
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void GameReady(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnEnteredLevel(e);
    }
    
    protected virtual void CubeEnteredStandingUp(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelComplete(Invert.ECS.IEvent e) {
        OnLevelComplete(e);
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void RollBegin(Invert.ECS.IEvent e) {
        OnRoll(e);
    }
    
    protected virtual void OnEnteredLevel(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(eventData.LevelId, out level)) {
            return;
        }
        this.OnEnteredLevel(eventData, level);
    }
    
    protected virtual void OnEnteredLevel(LevelEventData data, Level level) {
    }
    
    protected virtual void OnLevelComplete(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        Level level;
        if (!Game.ComponentSystem.TryGetComponent<Level>(eventData.LevelId, out level)) {
            return;
        }
        this.OnLevelComplete(eventData, level);
    }
    
    protected virtual void OnLevelComplete(LevelEventData data, Level level) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    protected virtual void OnRoll(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.EntityId, out player)) {
            return;
        }
        this.OnRoll(eventData, player);
    }
    
    protected virtual void OnRoll(RollEventData data, Player player) {
    }
}

public class SpecialFXSystemBase : UnitySystem {
    
    private ComponentManager<TweenPlateColors> _TweenPlateColorsManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    private ComponentManager<Teliporter> _TeliporterManager;
    
    public ComponentManager<TweenPlateColors> TweenPlateColorsManager {
        get {
            return _TweenPlateColorsManager;
        }
        set {
            _TweenPlateColorsManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public ComponentManager<Teliporter> TeliporterManager {
        get {
            return _TeliporterManager;
        }
        set {
            _TeliporterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        TweenPlateColorsManager = game.ComponentSystem.RegisterComponent<TweenPlateColors>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        TeliporterManager = game.ComponentSystem.RegisterComponent<Teliporter>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( LevelSystemEvents.LevelRestart, LevelRestart );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( PlateSystemEvents.GoalPlateHit, GoalPlateHit );
        game.EventManager.ListenFor( TeliporterSystemEvents.Teliporting, Teliporting );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        OnCubeEntered(e);
        TweenPlateOn(e);
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeft(e);
        TweenPlateOff(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void LevelRestart(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnCubeReset(e);
    }
    
    protected virtual void GoalPlateHit(Invert.ECS.IEvent e) {
        OnGoalPlate(e);
    }
    
    protected virtual void Teliporting(Invert.ECS.IEvent e) {
        OnTeliporting(e);
    }
    
    protected virtual void OnCubeEntered(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeEntered(eventData, plate);
    }
    
    protected virtual void OnCubeEntered(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void TweenPlateOn(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TweenPlateColors tweenplatecolors;
        if (!Game.ComponentSystem.TryGetComponent<TweenPlateColors>(eventData.PlateId, out tweenplatecolors)) {
            return;
        }
        this.TweenPlateOn(eventData, tweenplatecolors);
    }
    
    protected virtual void TweenPlateOn(PlateCubeCollsion data, TweenPlateColors tweenplatecolors) {
    }
    
    protected virtual void OnCubeLeft(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeLeft(eventData, plate);
    }
    
    protected virtual void OnCubeLeft(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void TweenPlateOff(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TweenPlateColors tweenplatecolors;
        if (!Game.ComponentSystem.TryGetComponent<TweenPlateColors>(eventData.PlateId, out tweenplatecolors)) {
            return;
        }
        this.TweenPlateOff(eventData, tweenplatecolors);
    }
    
    protected virtual void TweenPlateOff(PlateCubeCollsion data, TweenPlateColors tweenplatecolors) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    protected virtual void OnCubeReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnCubeReset(eventData, cube);
    }
    
    protected virtual void OnCubeReset(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnGoalPlate(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(eventData.PlateId, out goalplate)) {
            return;
        }
        this.OnGoalPlate(eventData, goalplate);
    }
    
    protected virtual void OnGoalPlate(PlateCubeCollsion data, GoalPlate goalplate) {
    }
    
    protected virtual void OnTeliporting(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Teliporter teliporter;
        if (!Game.ComponentSystem.TryGetComponent<Teliporter>(eventData.EntityId, out teliporter)) {
            return;
        }
        this.OnTeliporting(eventData, teliporter);
    }
    
    protected virtual void OnTeliporting(EntityEventData data, Teliporter teliporter) {
    }
}

public class FlipCubeSoundSystemBase : UnitySystem {
    
    private ComponentManager<Cube> _CubeManager;
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<GoalPlate> _GoalPlateManager;
    
    public ComponentManager<Cube> CubeManager {
        get {
            return _CubeManager;
        }
        set {
            _CubeManager = value;
        }
    }
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<GoalPlate> GoalPlateManager {
        get {
            return _GoalPlateManager;
        }
        set {
            _GoalPlateManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        CubeManager = game.ComponentSystem.RegisterComponent<Cube>();
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        GoalPlateManager = game.ComponentSystem.RegisterComponent<GoalPlate>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
        game.EventManager.ListenFor( PlateSystemEvents.CubeLeft, CubeLeft );
        game.EventManager.ListenFor( CubeGravitySystemEvents.OnFall, OnFall );
        game.EventManager.ListenFor( FlipCubeGameSystemEvents.GameOver, GameOver );
        game.EventManager.ListenFor( CubeInputSystemEvents.Selected, Selected );
        game.EventManager.ListenFor( SwitchPlateSystemEvents.PlateActivatedOn, PlateActivatedOn );
        game.EventManager.ListenFor( SwitchPlateSystemEvents.PlateActivatedOff, PlateActivatedOff );
        game.EventManager.ListenFor( CubeSystemEvents.RollBegin, RollBegin );
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
        game.EventManager.ListenFor( CubeSystemEvents.Reset, Reset );
        game.EventManager.ListenFor( UnityEvents.CollisionEnter, CollisionEnter );
        game.EventManager.ListenFor( TeliporterSystemEvents.Teliporting, Teliporting );
        game.EventManager.ListenFor( CubeSystemEvents.CubeMoved, CubeMoved );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        OnCubeEnter(e);
    }
    
    protected virtual void CubeLeft(Invert.ECS.IEvent e) {
        OnCubeLeft(e);
    }
    
    protected virtual void OnFall(Invert.ECS.IEvent e) {
        OnCubeFall(e);
    }
    
    protected virtual void GameOver(Invert.ECS.IEvent e) {
    }
    
    protected virtual void Selected(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlateActivatedOn(Invert.ECS.IEvent e) {
    }
    
    protected virtual void PlateActivatedOff(Invert.ECS.IEvent e) {
    }
    
    protected virtual void RollBegin(Invert.ECS.IEvent e) {
        OnRollBegin(e);
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
        OnRollComplete(e);
    }
    
    protected virtual void Reset(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void CollisionEnter(Invert.ECS.IEvent e) {
        OnComplete(e);
    }
    
    protected virtual void Teliporting(Invert.ECS.IEvent e) {
        OnTeliporting(e);
    }
    
    protected virtual void CubeMoved(Invert.ECS.IEvent e) {
        OnCubeMoved(e);
    }
    
    protected virtual void OnCubeEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeEnter(eventData, plate);
    }
    
    protected virtual void OnCubeEnter(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void OnCubeLeft(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(eventData.PlateId, out plate)) {
            return;
        }
        this.OnCubeLeft(eventData, plate);
    }
    
    protected virtual void OnCubeLeft(PlateCubeCollsion data, Plate plate) {
    }
    
    protected virtual void OnCubeFall(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnCubeFall(eventData, cube);
    }
    
    protected virtual void OnCubeFall(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnRollBegin(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnRollBegin(eventData, cube);
    }
    
    protected virtual void OnRollBegin(RollEventData data, Cube cube) {
    }
    
    protected virtual void OnRollComplete(Invert.ECS.IEvent e) {
        var eventData = (RollEventData)e.Data;
        this.OnRollComplete(eventData);
    }
    
    protected virtual void OnRollComplete(RollEventData data) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.EntityId, out cube)) {
            return;
        }
        this.OnReset(eventData, cube);
    }
    
    protected virtual void OnReset(EntityEventData data, Cube cube) {
    }
    
    protected virtual void OnComplete(Invert.ECS.IEvent e) {
        var eventData = (CollisionEventData)e.Data;
        GoalPlate goalplate;
        if (!Game.ComponentSystem.TryGetComponent<GoalPlate>(eventData.ColliderId, out goalplate)) {
            return;
        }
        Cube cube;
        if (!Game.ComponentSystem.TryGetComponent<Cube>(eventData.CollideeId, out cube)) {
            return;
        }
        this.OnComplete(eventData, goalplate, cube);
    }
    
    protected virtual void OnComplete(CollisionEventData data, GoalPlate goalplate, Cube cube) {
    }
    
    protected virtual void OnTeliporting(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnTeliporting(eventData);
    }
    
    protected virtual void OnTeliporting(EntityEventData data) {
    }
    
    protected virtual void OnCubeMoved(Invert.ECS.IEvent e) {
        var eventData = (MoveCubeData)e.Data;
        this.OnCubeMoved(eventData);
    }
    
    protected virtual void OnCubeMoved(MoveCubeData data) {
    }
}

public class NotificationSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
    
    public virtual void SignalDisplay(NotificationData data) {
        Game.EventManager.SignalEvent(new EventData(NotificationSystemEvents.Display,data));
    }
    
    public static void SignalDisplay(IGame game, NotificationData data) {
        game.EventManager.SignalEvent(new EventData(NotificationSystemEvents.Display,data));
    }
}

public class XPSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        game.EventManager.ListenFor( CubeSystemEvents.RollComplete, RollComplete );
    }
    
    protected virtual void RollComplete(Invert.ECS.IEvent e) {
    }
}

public class PlayerSystemBase : UnitySystem {
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<ActiveWithXp> _ActiveWithXpManager;
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<ActiveWithXp> ActiveWithXpManager {
        get {
            return _ActiveWithXpManager;
        }
        set {
            _ActiveWithXpManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        ActiveWithXpManager = game.ComponentSystem.RegisterComponent<ActiveWithXp>();
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( PlayerSystemEvents.AddXp, AddXp );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void AddXp(Invert.ECS.IEvent e) {
        HandleAddXp(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void HandleAddXp(Invert.ECS.IEvent e) {
        var eventData = (PlayerExperienceData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.PlayerId, out player)) {
            return;
        }
        this.HandleAddXp(eventData, player);
    }
    
    protected virtual void HandleAddXp(PlayerExperienceData data, Player player) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    public virtual void SignalPlayerLoaded(PlayerEventData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerLoaded,data));
    }
    
    public virtual void SignalAddXp(PlayerExperienceData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.AddXp,data));
    }
    
    public virtual void SignalPlayerXpChanged(PlayerExperienceData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerXpChanged,data));
    }
    
    public static void SignalPlayerLoaded(IGame game, PlayerEventData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerLoaded,data));
    }
    
    public static void SignalAddXp(IGame game, PlayerExperienceData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.AddXp,data));
    }
    
    public static void SignalPlayerXpChanged(IGame game, PlayerExperienceData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerXpChanged,data));
    }
}

public class ScoringSystemBase : UnitySystem {
    
    private ComponentManager<Scoring> _ScoringManager;
    
    public ComponentManager<Scoring> ScoringManager {
        get {
            return _ScoringManager;
        }
        set {
            _ScoringManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ScoringManager = game.ComponentSystem.RegisterComponent<Scoring>();
    }
    
    public virtual void SignalAddToScore(Int32 data) {
        Game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.AddToScore,data));
    }
    
    public virtual void SignalRemoveFromScore(Int32 data) {
        Game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.RemoveFromScore,data));
    }
    
    public static void SignalAddToScore(IGame game, Int32 data) {
        game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.AddToScore,data));
    }
    
    public static void SignalRemoveFromScore(IGame game, Int32 data) {
        game.EventManager.SignalEvent(new EventData(ScoringSystemEvents.RemoveFromScore,data));
    }
}

public class ZoneSystemBase : UnitySystem {
    
    private ComponentManager<Zone> _ZoneManager;
    
    private ComponentManager<ZoneScene> _ZoneSceneManager;
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public ComponentManager<ZoneScene> ZoneSceneManager {
        get {
            return _ZoneSceneManager;
        }
        set {
            _ZoneSceneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        ZoneSceneManager = game.ComponentSystem.RegisterComponent<ZoneScene>();
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    public virtual void SignalEnterZone(ZoneEventData data) {
        Game.EventManager.SignalEvent(new EventData(ZoneSystemEvents.EnterZone,data));
    }
    
    public virtual void SignalEnteredZone(ZoneEventData data) {
        Game.EventManager.SignalEvent(new EventData(ZoneSystemEvents.EnteredZone,data));
    }
    
    public static void SignalEnterZone(IGame game, ZoneEventData data) {
        game.EventManager.SignalEvent(new EventData(ZoneSystemEvents.EnterZone,data));
    }
    
    public static void SignalEnteredZone(IGame game, ZoneEventData data) {
        game.EventManager.SignalEvent(new EventData(ZoneSystemEvents.EnteredZone,data));
    }
}

public class PlayerDataSystemBase : UnitySystem {
    
    private ComponentManager<PlayerStat> _PlayerStatManager;
    
    public ComponentManager<PlayerStat> PlayerStatManager {
        get {
            return _PlayerStatManager;
        }
        set {
            _PlayerStatManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlayerStatManager = game.ComponentSystem.RegisterComponent<PlayerStat>();
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( FrameworkEvents.ComponentDestroyed, ComponentDestroyed );
        game.EventManager.ListenFor( PlayerDataSystemEvents.SaveGame, SaveGame );
        game.EventManager.ListenFor( PlayerDataSystemEvents.PlayerLoggedIn, PlayerLoggedIn );
        game.EventManager.ListenFor( PlayerDataSystemEvents.PlayerLoggedOut, PlayerLoggedOut );
        game.EventManager.ListenFor( PlayerDataSystemEvents.LoadGame, LoadGame );
        game.EventManager.ListenFor( PlayerDataSystemEvents.LoginPlayer, LoginPlayer );
        game.EventManager.ListenFor( PlayerDataSystemEvents.IncrementPlayerStat, IncrementPlayerStat );
        game.EventManager.ListenFor( PlayerDataSystemEvents.DecrementPlayerStat, DecrementPlayerStat );
        game.EventManager.ListenFor( PlayerDataSystemEvents.SetPlayerStat, SetPlayerStat );
        game.EventManager.ListenFor( PlayerDataSystemEvents.LogoutPlayer, LogoutPlayer );
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
        OnComponentCreated(e);
    }
    
    protected virtual void ComponentDestroyed(Invert.ECS.IEvent e) {
        OnComponentDestroyed(e);
    }
    
    protected virtual void SaveGame(Invert.ECS.IEvent e) {
        OnSaveGame(e);
    }
    
    protected virtual void PlayerLoggedIn(Invert.ECS.IEvent e) {
        OnLoggedIn(e);
    }
    
    protected virtual void PlayerLoggedOut(Invert.ECS.IEvent e) {
        OnLoggedOut(e);
    }
    
    protected virtual void LoadGame(Invert.ECS.IEvent e) {
        OnLoadData(e);
    }
    
    protected virtual void LoginPlayer(Invert.ECS.IEvent e) {
        OnLoginPlayer(e);
    }
    
    protected virtual void IncrementPlayerStat(Invert.ECS.IEvent e) {
        OnIncrementPlayerStat(e);
    }
    
    protected virtual void DecrementPlayerStat(Invert.ECS.IEvent e) {
        OnDecrementPlayerStat(e);
    }
    
    protected virtual void SetPlayerStat(Invert.ECS.IEvent e) {
        OnSetPlayerStat(e);
    }
    
    protected virtual void LogoutPlayer(Invert.ECS.IEvent e) {
        OnLogoutPlayer(e);
    }
    
    protected virtual void OnComponentCreated(Invert.ECS.IEvent e) {
        var eventData = (IComponent)e.Data;
        this.OnComponentCreated(eventData);
    }
    
    protected virtual void OnComponentCreated(IComponent data) {
    }
    
    protected virtual void OnComponentDestroyed(Invert.ECS.IEvent e) {
        var eventData = (IComponent)e.Data;
        this.OnComponentDestroyed(eventData);
    }
    
    protected virtual void OnComponentDestroyed(IComponent data) {
    }
    
    protected virtual void OnSaveGame(Invert.ECS.IEvent e) {
        var eventData = (SaveGameEventData)e.Data;
        this.OnSaveGame(eventData);
    }
    
    protected virtual void OnSaveGame(SaveGameEventData data) {
    }
    
    protected virtual void OnLoggedIn(Invert.ECS.IEvent e) {
        var eventData = (LoginData)e.Data;
        this.OnLoggedIn(eventData);
    }
    
    protected virtual void OnLoggedIn(LoginData data) {
    }
    
    protected virtual void OnLoggedOut(Invert.ECS.IEvent e) {
        var eventData = (LogoutData)e.Data;
        this.OnLoggedOut(eventData);
    }
    
    protected virtual void OnLoggedOut(LogoutData data) {
    }
    
    protected virtual void OnLoadData(Invert.ECS.IEvent e) {
        var eventData = (LoadGameEventData)e.Data;
        this.OnLoadData(eventData);
    }
    
    protected virtual void OnLoadData(LoadGameEventData data) {
    }
    
    protected virtual void OnLoginPlayer(Invert.ECS.IEvent e) {
        var eventData = (LoginPlayerData)e.Data;
        this.OnLoginPlayer(eventData);
    }
    
    protected virtual void OnLoginPlayer(LoginPlayerData data) {
    }
    
    protected virtual void OnIncrementPlayerStat(Invert.ECS.IEvent e) {
        var eventData = (SetPlayerStatData)e.Data;
        this.OnIncrementPlayerStat(eventData);
    }
    
    protected virtual void OnIncrementPlayerStat(SetPlayerStatData data) {
    }
    
    protected virtual void OnDecrementPlayerStat(Invert.ECS.IEvent e) {
        var eventData = (SetPlayerStatData)e.Data;
        this.OnDecrementPlayerStat(eventData);
    }
    
    protected virtual void OnDecrementPlayerStat(SetPlayerStatData data) {
    }
    
    protected virtual void OnSetPlayerStat(Invert.ECS.IEvent e) {
        var eventData = (SetPlayerStatData)e.Data;
        this.OnSetPlayerStat(eventData);
    }
    
    protected virtual void OnSetPlayerStat(SetPlayerStatData data) {
    }
    
    protected virtual void OnLogoutPlayer(Invert.ECS.IEvent e) {
        var eventData = (LogoutData)e.Data;
        this.OnLogoutPlayer(eventData);
    }
    
    protected virtual void OnLogoutPlayer(LogoutData data) {
    }
    
    public virtual void SignalSaveGame(SaveGameEventData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.SaveGame,data));
    }
    
    public virtual void SignalPlayerLoggedIn(LoginData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.PlayerLoggedIn,data));
    }
    
    public virtual void SignalPlayerLoggedOut(LogoutData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.PlayerLoggedOut,data));
    }
    
    public virtual void SignalLoadGame(LoadGameEventData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LoadGame,data));
    }
    
    public virtual void SignalLoginPlayer(LoginPlayerData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LoginPlayer,data));
    }
    
    public virtual void SignalSetPlayerStat(SetPlayerStatData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.SetPlayerStat,data));
    }
    
    public virtual void SignalIncrementPlayerStat(SetPlayerStatData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.IncrementPlayerStat,data));
    }
    
    public virtual void SignalDecrementPlayerStat(SetPlayerStatData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.DecrementPlayerStat,data));
    }
    
    public virtual void SignalLogoutPlayer(LogoutData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LogoutPlayer,data));
    }
    
    public virtual void SignalStatChanged(StatChangedData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.StatChanged,data));
    }
    
    public virtual void SignalOnSaveComponent(SaveComponentData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.OnSaveComponent,data));
    }
    
    public static void SignalSaveGame(IGame game, SaveGameEventData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.SaveGame,data));
    }
    
    public static void SignalPlayerLoggedIn(IGame game, LoginData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.PlayerLoggedIn,data));
    }
    
    public static void SignalPlayerLoggedOut(IGame game, LogoutData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.PlayerLoggedOut,data));
    }
    
    public static void SignalLoadGame(IGame game, LoadGameEventData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LoadGame,data));
    }
    
    public static void SignalLoginPlayer(IGame game, LoginPlayerData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LoginPlayer,data));
    }
    
    public static void SignalSetPlayerStat(IGame game, SetPlayerStatData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.SetPlayerStat,data));
    }
    
    public static void SignalIncrementPlayerStat(IGame game, SetPlayerStatData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.IncrementPlayerStat,data));
    }
    
    public static void SignalDecrementPlayerStat(IGame game, SetPlayerStatData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.DecrementPlayerStat,data));
    }
    
    public static void SignalLogoutPlayer(IGame game, LogoutData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.LogoutPlayer,data));
    }
    
    public static void SignalStatChanged(IGame game, StatChangedData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.StatChanged,data));
    }
    
    public static void SignalOnSaveComponent(IGame game, SaveComponentData data) {
        game.EventManager.SignalEvent(new EventData(PlayerDataSystemEvents.OnSaveComponent,data));
    }
}

public class FlipCubeUISystemBase : UnitySystem {
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<Level> _LevelManager;
    
    private ComponentManager<LevelScene> _LevelSceneManager;
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<Level> LevelManager {
        get {
            return _LevelManager;
        }
        set {
            _LevelManager = value;
        }
    }
    
    public ComponentManager<LevelScene> LevelSceneManager {
        get {
            return _LevelSceneManager;
        }
        set {
            _LevelSceneManager = value;
        }
    }
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        LevelManager = game.ComponentSystem.RegisterComponent<Level>();
        LevelSceneManager = game.ComponentSystem.RegisterComponent<LevelScene>();
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( NotificationSystemEvents.Display, Display );
        game.EventManager.ListenFor( FrameworkEvents.LoadingProgress, LoadingProgress );
        game.EventManager.ListenFor( LevelSystemEvents.EnteredLevel, EnteredLevel );
        game.EventManager.ListenFor( ZoneSystemEvents.EnteredZone, EnteredZone );
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameReady, GameReady );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
    }
    
    protected virtual void Display(Invert.ECS.IEvent e) {
        ShowNotification(e);
    }
    
    protected virtual void LoadingProgress(Invert.ECS.IEvent e) {
        OnLoadingProgress(e);
    }
    
    protected virtual void EnteredLevel(Invert.ECS.IEvent e) {
        OnLevelEntered(e);
    }
    
    protected virtual void EnteredZone(Invert.ECS.IEvent e) {
        OnZoneEntered(e);
    }
    
    protected virtual void GameReady(Invert.ECS.IEvent e) {
        OnGameReady(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
        OnXpChanged(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ShowNotification(Invert.ECS.IEvent e) {
        var eventData = (NotificationData)e.Data;
        this.ShowNotification(eventData);
    }
    
    protected virtual void ShowNotification(NotificationData data) {
    }
    
    protected virtual void OnLoadingProgress(Invert.ECS.IEvent e) {
        var eventData = (LoadingProgressData)e.Data;
        this.OnLoadingProgress(eventData);
    }
    
    protected virtual void OnLoadingProgress(LoadingProgressData data) {
    }
    
    protected virtual void OnLevelEntered(Invert.ECS.IEvent e) {
        var eventData = (LevelEventData)e.Data;
        this.OnLevelEntered(eventData);
    }
    
    protected virtual void OnLevelEntered(LevelEventData data) {
    }
    
    protected virtual void OnZoneEntered(Invert.ECS.IEvent e) {
        var eventData = (ZoneEventData)e.Data;
        this.OnZoneEntered(eventData);
    }
    
    protected virtual void OnZoneEntered(ZoneEventData data) {
    }
    
    protected virtual void OnGameReady(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnGameReady(eventData);
    }
    
    protected virtual void OnGameReady(EntityEventData data) {
    }
    
    protected virtual void OnXpChanged(Invert.ECS.IEvent e) {
        var eventData = (PlayerExperienceData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.PlayerId, out player)) {
            return;
        }
        this.OnXpChanged(eventData, player);
    }
    
    protected virtual void OnXpChanged(PlayerExperienceData data, Player player) {
    }
}

public class HUDSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public class WindowSystemBase : UnitySystem {
    
    private ComponentManager<Window> _WindowManager;
    
    private ComponentManager<ToggleWindowOnClick> _ToggleWindowOnClickManager;
    
    private ComponentManager<CloseWindowOnClick> _CloseWindowOnClickManager;
    
    public ComponentManager<Window> WindowManager {
        get {
            return _WindowManager;
        }
        set {
            _WindowManager = value;
        }
    }
    
    public ComponentManager<ToggleWindowOnClick> ToggleWindowOnClickManager {
        get {
            return _ToggleWindowOnClickManager;
        }
        set {
            _ToggleWindowOnClickManager = value;
        }
    }
    
    public ComponentManager<CloseWindowOnClick> CloseWindowOnClickManager {
        get {
            return _CloseWindowOnClickManager;
        }
        set {
            _CloseWindowOnClickManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        WindowManager = game.ComponentSystem.RegisterComponent<Window>();
        ToggleWindowOnClickManager = game.ComponentSystem.RegisterComponent<ToggleWindowOnClick>();
        CloseWindowOnClickManager = game.ComponentSystem.RegisterComponent<CloseWindowOnClick>();
        game.EventManager.ListenFor( WindowSystemEvents.ShowWindow, ShowWindow );
        game.EventManager.ListenFor( WindowSystemEvents.CloseWindow, CloseWindow );
        game.EventManager.ListenFor( WindowSystemEvents.ToggleWindow, ToggleWindow );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( uGUIEvents.Click, Click );
    }
    
    protected virtual void ShowWindow(Invert.ECS.IEvent e) {
        HandleShowWindow(e);
    }
    
    protected virtual void CloseWindow(Invert.ECS.IEvent e) {
        HandleCloseWindow(e);
    }
    
    protected virtual void ToggleWindow(Invert.ECS.IEvent e) {
        HandleToggleWindow(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
        OnLoaded(e);
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
        OnComponentCreated(e);
    }
    
    protected virtual void Click(Invert.ECS.IEvent e) {
        OnClick(e);
        OnToggleWindowClick(e);
        OnCloseWindowClick(e);
    }
    
    protected virtual void HandleShowWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleShowWindow(eventData);
    }
    
    protected virtual void HandleShowWindow(WindowEventData data) {
    }
    
    protected virtual void HandleCloseWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleCloseWindow(eventData);
    }
    
    protected virtual void HandleCloseWindow(WindowEventData data) {
    }
    
    protected virtual void HandleToggleWindow(Invert.ECS.IEvent e) {
        var eventData = (WindowEventData)e.Data;
        this.HandleToggleWindow(eventData);
    }
    
    protected virtual void HandleToggleWindow(WindowEventData data) {
    }
    
    protected virtual void OnLoaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnLoaded() {
    }
    
    protected virtual void OnComponentCreated(Invert.ECS.IEvent e) {
        var eventData = (IComponent)e.Data;
        this.OnComponentCreated(eventData);
    }
    
    protected virtual void OnComponentCreated(IComponent data) {
    }
    
    protected virtual void OnClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(eventData.EntityId, out window)) {
            return;
        }
        this.OnClick(eventData, window);
        if (eventData.Name == "Close") {
            WindowEventData closewindowData = new WindowEventData();
            closewindowData.Window = window.WindowType;
            WindowSystem.SignalCloseWindow(this.Game, closewindowData);
        }
    }
    
    protected virtual void OnClick(UIEventData data, Window window) {
    }
    
    protected virtual void OnToggleWindowClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        ToggleWindowOnClick togglewindowonclick;
        if (!Game.ComponentSystem.TryGetComponent<ToggleWindowOnClick>(eventData.EntityId, out togglewindowonclick)) {
            return;
        }
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(togglewindowonclick.WindowId, out window)) {
            return;
        }
        this.OnToggleWindowClick(eventData, togglewindowonclick, window);
        WindowEventData togglewindowData = new WindowEventData();
        togglewindowData.Window = window.WindowType;
        WindowSystem.SignalToggleWindow(this.Game, togglewindowData);
    }
    
    protected virtual void OnToggleWindowClick(UIEventData data, ToggleWindowOnClick togglewindowonclick, Window window) {
    }
    
    protected virtual void OnCloseWindowClick(Invert.ECS.IEvent e) {
        var eventData = (UIEventData)e.Data;
        CloseWindowOnClick closewindowonclick;
        if (!Game.ComponentSystem.TryGetComponent<CloseWindowOnClick>(eventData.EntityId, out closewindowonclick)) {
            return;
        }
        Window window;
        if (!Game.ComponentSystem.TryGetComponent<Window>(closewindowonclick.WindowId, out window)) {
            return;
        }
        this.OnCloseWindowClick(eventData, closewindowonclick, window);
        WindowEventData closewindowData = new WindowEventData();
        closewindowData.Window = window.WindowType;
        WindowSystem.SignalCloseWindow(this.Game, closewindowData);
    }
    
    protected virtual void OnCloseWindowClick(UIEventData data, CloseWindowOnClick closewindowonclick, Window window) {
    }
    
    public virtual void SignalShowWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ShowWindow,data));
    }
    
    public virtual void SignalCloseWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.CloseWindow,data));
    }
    
    public virtual void SignalToggleWindow(WindowEventData data) {
        Game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ToggleWindow,data));
    }
    
    public static void SignalShowWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ShowWindow,data));
    }
    
    public static void SignalCloseWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.CloseWindow,data));
    }
    
    public static void SignalToggleWindow(IGame game, WindowEventData data) {
        game.EventManager.SignalEvent(new EventData(WindowSystemEvents.ToggleWindow,data));
    }
}

public class ZonesWindowSystemBase : UnitySystem {
    
    private ComponentManager<Zone> _ZoneManager;
    
    public ComponentManager<Zone> ZoneManager {
        get {
            return _ZoneManager;
        }
        set {
            _ZoneManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        ZoneManager = game.ComponentSystem.RegisterComponent<Zone>();
        game.EventManager.ListenFor( FlipCubeSystemEvents.GameDataReady, GameDataReady );
        game.EventManager.ListenFor( FrameworkEvents.Loaded, Loaded );
    }
    
    protected virtual void GameDataReady(Invert.ECS.IEvent e) {
        OnLoadData(e);
    }
    
    protected virtual void Loaded(Invert.ECS.IEvent e) {
    }
    
    protected virtual void OnLoadData(Invert.ECS.IEvent e) {
        var eventData = (GameReadyData)e.Data;
        this.OnLoadData(eventData);
    }
    
    protected virtual void OnLoadData(GameReadyData data) {
    }
}

public class FriendsWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public class ProfileWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public class AccountWindowSystemBase : UnitySystem {
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
    }
}

public class TutorialSystemBase : UnitySystem {
    
    private ComponentManager<Plate> _PlateManager;
    
    private ComponentManager<TutorialOnEnter> _TutorialOnEnterManager;
    
    public ComponentManager<Plate> PlateManager {
        get {
            return _PlateManager;
        }
        set {
            _PlateManager = value;
        }
    }
    
    public ComponentManager<TutorialOnEnter> TutorialOnEnterManager {
        get {
            return _TutorialOnEnterManager;
        }
        set {
            _TutorialOnEnterManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlateManager = game.ComponentSystem.RegisterComponent<Plate>();
        TutorialOnEnterManager = game.ComponentSystem.RegisterComponent<TutorialOnEnter>();
        game.EventManager.ListenFor( PlateSystemEvents.CubeEntered, CubeEntered );
    }
    
    protected virtual void CubeEntered(Invert.ECS.IEvent e) {
        TutorialOnEnter(e);
    }
    
    protected virtual void TutorialOnEnter(Invert.ECS.IEvent e) {
        var eventData = (PlateCubeCollsion)e.Data;
        TutorialOnEnter tutorialonenter;
        if (!Game.ComponentSystem.TryGetComponent<TutorialOnEnter>(eventData.PlateId, out tutorialonenter)) {
            return;
        }
        Plate plate;
        if (!Game.ComponentSystem.TryGetComponent<Plate>(tutorialonenter.ArrowOver, out plate)) {
            return;
        }
        this.TutorialOnEnter(eventData, tutorialonenter, plate);
    }
    
    protected virtual void TutorialOnEnter(PlateCubeCollsion data, TutorialOnEnter tutorialonenter, Plate plate) {
    }
}
