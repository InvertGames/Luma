// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.ECS;


public class PlayerSystemBase : UnitySystem {
    
    private ComponentManager<Player> _PlayerManager;
    
    private ComponentManager<ActiveWithXp> _ActiveWithXpManager;
    
    public ComponentManager<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public ComponentManager<ActiveWithXp> ActiveWithXpManager {
        get {
            return _ActiveWithXpManager;
        }
        set {
            _ActiveWithXpManager = value;
        }
    }
    
    public override void Initialize(Invert.ECS.IGame game) {
        base.Initialize(game);
        PlayerManager = game.ComponentSystem.RegisterComponent<Player>();
        ActiveWithXpManager = game.ComponentSystem.RegisterComponent<ActiveWithXp>();
        game.EventManager.ListenFor( FrameworkEvents.ComponentCreated, ComponentCreated );
        game.EventManager.ListenFor( PlayerSystemEvents.AddXp, AddXp );
        game.EventManager.ListenFor( PlayerSystemEvents.PlayerXpChanged, PlayerXpChanged );
        game.EventManager.ListenFor( FlipCubeSystemEvents.ResetGame, ResetGame );
    }
    
    protected virtual void ComponentCreated(Invert.ECS.IEvent e) {
    }
    
    protected virtual void AddXp(Invert.ECS.IEvent e) {
        HandleAddXp(e);
    }
    
    protected virtual void PlayerXpChanged(Invert.ECS.IEvent e) {
    }
    
    protected virtual void ResetGame(Invert.ECS.IEvent e) {
        OnReset(e);
    }
    
    protected virtual void HandleAddXp(Invert.ECS.IEvent e) {
        var eventData = (PlayerExperienceData)e.Data;
        Player player;
        if (!Game.ComponentSystem.TryGetComponent<Player>(eventData.PlayerId, out player)) {
            return;
        }
        this.HandleAddXp(eventData, player);
    }
    
    protected virtual void HandleAddXp(PlayerExperienceData data, Player player) {
    }
    
    protected virtual void OnReset(Invert.ECS.IEvent e) {
        var eventData = (EntityEventData)e.Data;
        this.OnReset(eventData);
    }
    
    protected virtual void OnReset(EntityEventData data) {
    }
    
    public virtual void SignalPlayerLoaded(PlayerEventData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerLoaded,data));
    }
    
    public virtual void SignalAddXp(PlayerExperienceData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.AddXp,data));
    }
    
    public virtual void SignalPlayerXpChanged(PlayerExperienceData data) {
        Game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerXpChanged,data));
    }
    
    public static void SignalPlayerLoaded(IGame game, PlayerEventData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerLoaded,data));
    }
    
    public static void SignalAddXp(IGame game, PlayerExperienceData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.AddXp,data));
    }
    
    public static void SignalPlayerXpChanged(IGame game, PlayerExperienceData data) {
        game.EventManager.SignalEvent(new EventData(PlayerSystemEvents.PlayerXpChanged,data));
    }
}

public enum PlayerSystemEvents {
    
    PlayerLoaded,
    
    AddXp,
    
    PlayerXpChanged,
}
